[
    {
        "CLASS_name": "PBEParameterSpec",
        "Description": "PBEParameterSpec is a class that specifies the parameters for password-based encryption (PBE) algorithms, including a salt and an iteration count to protect against dictionary attacks.",
        "API_funtions": [
            {
              "Function_name": "PBEParameterSpec(byte[] salt,int iterationCount)",
              "definition": "Constructs a parameter set for password-based encryption as defined in the PKCS #5 standard.",
              "Parameters": "byte[] salt, int iterationCount",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "Use strong, randomly generated salt and a high iteration count for better security.",
              "Insecure_use": "Using a predictable salt or a low iteration count can weaken the encryption."
            },
            {
              "Function_name": "PBEParameterSpec(byte[] salt,int iterationCount,AlgorithmParameterSpec paramSpec)",
              "definition": "Constructs a parameter set for password-based encryption as defined in the PKCS #5 standard.",
              "Parameters": "(byte[] salt,int iterationCount,AlgorithmParameterSpec paramSpec)",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "Use strong, randomly generated salt and a high iteration count for better security.",
              "Insecure_use": "Using a predictable salt or a low iteration count can weaken the encryption."
            },
            {
              "Function_name": "getIterationCount",
              "definition": "Returns the iteration count.",
              "Parameters": "none",
              "Returns": "int",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getSalt",
              "definition": "Returns the salt.",
              "Parameters": "none",
              "Returns": "byte[]",
              "Throws": "none",
              "Secure_use": "Ensure the salt is stored securely and is unique for each encryption operation.",
              "Insecure_use": "Reusing the same salt across different encryption operations can lead to vulnerabilities."
            },
            {
              "Function_name": "PBEParameterSpec",
              "definition": "Constructs a parameter set for password-based encryption as defined in the PKCS #5 standard.",
              "Parameters": "salt - the salt. The contents of salt are copied to protect against subsequent modification. iterationCount - the iteration count. paramSpec - the cipher algorithm parameter specification, which may be null.",
              "Returns": "none",
              "Throws": "NullPointerException - if salt is null.",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getIterationCount",
              "definition": "public int getIterationCount()",
              "Parameters": "none",
              "Returns": "the iteration count",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getParameterSpec",
              "definition": "public AlgorithmParameterSpec getParameterSpec()",
              "Parameters": "none",
              "Returns": "the parameter specification, or null if none was set.",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            }
      ]      
    },
    {
        "CLASS_name": "SecretKeySpec",
        "Description": "This API specifies a secret key in a provider-independent fashion.",
        "API_funtions": [
            {
              "Function_name": "SecretKeySpec(byte[] key,String algorithm)",
              "definition": "This class specifies a secret key in a provider-independent fashion. It can be used to construct a SecretKey from a byte array, without having to go through a (provider-based) SecretKeyFactory.",
              "Parameters": "key - the key material of the secret key. The contents of the array are copied to protect against subsequent modification. algorithm - the name of the secret-key algorithm to be associated with the given key material. See Appendix A in the Java Cryptography Architecture Reference Guide for information about standard algorithm names.",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "This class is useful for raw secret keys that can be represented as a byte array and have no key parameters associated with them, e.g., DES or Triple DES keys.",
              "Insecure_use": "none"
            },
            {
              "Function_name": "SecretKeySpec (byte[] key, int offset, int len, String algorithm)",
              "definition": "Constructs a secret key from the given byte array, using the first len bytes of key, starting at offset inclusive.",
              "Parameters": "key - the key material of the secret key. The first len bytes of the array beginning at offset inclusive are copied to protect against subsequent modification. offset - the offset in key where the key material starts. len - the length of the key material. algorithm - the name of the secret-key algorithm to be associated with the given key material. See Appendix A in the Java Cryptography Architecture Reference Guide for information about standard algorithm names.",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "equals (Object obj)",
              "definition": "Tests for equality between the specified object and this object.",
              "Parameters": "Object obj",
              "Returns": "boolean",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getAlgorithm",
              "definition": "Returns the name of the algorithm associated with this secret key.",
              "Parameters": "none",
              "Returns": "String",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getEncoded",
              "definition": "Returns the key material of this secret key.",
              "Parameters": "none",
              "Returns": "byte[]",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getFormat",
              "definition": "Returns the name of the encoding format for this secret key.",
              "Parameters": "none",
              "Returns": "String",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "hashCode",
              "definition": "Calculates a hash code value for the object.",
              "Parameters": "none",
              "Returns": "int",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "SecretKey Constructor",
              "definition": "Constructs a secret key from the given byte array, using the first len bytes of key, starting at offset inclusive.",
              "Parameters": "key - the key material of the secret key. The first len bytes of the array beginning at offset inclusive are copied to protect against subsequent modification. offset - the offset in key where the key material starts. len - the length of the key material. algorithm - the name of the secret-key algorithm to be associated with the given key material.",
              "Returns": "none",
              "Throws": "IllegalArgumentException - if algorithm is null or key is null, empty, or too short, i.e. key.length-offset<len. ArrayIndexOutOfBoundsException - is thrown if offset or len index bytes outside the key.",
              "Secure_use": "Use an algorithm-specific key specification class (e.g., DESKeySpec) to ensure the key meets the requirements of the specified algorithm.",
              "Insecure_use": "Using this constructor without checking if the key meets the algorithm-specific requirements, such as key length or weak key checks."
            },
            {
              "Function_name": "getAlgorithm",
              "definition": "Returns the name of the algorithm associated with this secret key.",
              "Parameters": "none",
              "Returns": "String - the name of the algorithm.",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getFormat",
              "definition": "Returns the name of the encoding format for this secret key.",
              "Parameters": "none",
              "Returns": "the string 'RAW'.",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getEncoded",
              "definition": "Returns the key material of this secret key.",
              "Parameters": "none",
              "Returns": "the key material. Returns a new array each time this method is called.",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "hashCode",
              "definition": "Calculates a hash code value for the object. Objects that are equal will also have the same hashcode.",
              "Parameters": "none",
              "Returns": "a hash code value for this object.",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "equals",
              "definition": "Tests for equality between the specified object and this object. Two SecretKeySpec objects are considered equal if they are both SecretKey instances which have the same case-insensitive algorithm name and key encoding.",
              "Parameters": "obj - the object to test for equality with this object.",
              "Returns": "true if the objects are considered equal, false if obj is null or otherwise.",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            }
        ]              
    },
    {
        "CLASS_name": "TrustManagerFactory",
        "Description": "API Description:\nThis class serves as a factory for creating trust managers based on a given source of trust material. Each trust manager handles a specific type of trust material for secure socket communications, typically using a KeyStore or provider-specific sources.",
        "API_funtions": [
          {
              "Function_name": "TrustManagerFactory(TrustManagerFactorySpi factorySpi, Provider provider, String algorithm)",
              "definition": "This class acts as a factory for trust managers based on a source of trust material. Each trust manager manages a specific type of trust material for use by secure sockets. The trust material is based on a KeyStore and/or provider specific sources.",
              "Parameters": "TrustManagerFactorySpi factorySpi, Provider provider, String algorithm",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
          },
          {
              "Function_name": "getAlgorithm",
              "definition": "Returns the algorithm name of this TrustManagerFactory object.",
              "Parameters": "none",
              "Returns": "String",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
          },
          {
              "Function_name": "getDefaultAlgorithm",
              "definition": "Obtains the default TrustManagerFactory algorithm name.",
              "Parameters": "none",
              "Returns": "String",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
          },
          {
              "Function_name": "getInstance(String algorithm)",
              "definition": "Returns a TrustManagerFactory object that acts as a factory for trust managers.",
              "Parameters": "String algorithm",
              "Returns": "TrustManagerFactory",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
          },
          {
              "Function_name": "getInstance(String algorithm, Provider provider)",
              "definition": "Returns a TrustManagerFactory object that acts as a factory for trust managers.",
              "Parameters": "String algorithm, Provider provider",
              "Returns": "TrustManagerFactory",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
          },
          {
              "Function_name": "getProvider",
              "definition": "Returns the provider of this TrustManagerFactory object.",
              "Parameters": "none",
              "Returns": "Provider",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
          },
          {
              "Function_name": "getTrustManagers",
              "definition": "Returns one trust manager for each type of trust material.",
              "Parameters": "none",
              "Returns": "TrustManager[]",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
          },
          {
              "Function_name": "init(KeyStore ks)",
              "definition": "Initializes this factory with a source of certificate authorities and related trust material.",
              "Parameters": "KeyStore ks",
              "Returns": "void",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
          },
          {
              "Function_name": "init(ManagerFactoryParameters spec)",
              "definition": "Initializes this factory with a source of certificate authorities and related trust material.",
              "Parameters": "ManagerFactoryParameters spec",
              "Returns": "void",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
          },
          {
              "Function_name": "TrustManagerFactory(factorySpi delegate, provider provider, algorithm algorithm)",
              "definition": "Creates a TrustManagerFactory object.",
              "Parameters": "factorySpi - the delegate, provider - the provider, algorithm - the algorithm",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
          },
          {
              "Function_name": "getDefaultAlgorithm",
              "definition": "Obtains the default TrustManagerFactory algorithm name.",
              "Parameters": "none",
              "Returns": "The default TrustManager algorithm name.",
              "Throws": "none",
              "Secure_use": "The default TrustManager can be changed at runtime by setting the value of the ssl.TrustManagerFactory.algorithm security property to the desired algorithm name.",
              "Insecure_use": "none"
          },
          {
              "Function_name": "getAlgorithm",
              "definition": "Returns the algorithm name of this TrustManagerFactory object. This is the same name that was specified in one of the getInstance calls that created this TrustManagerFactory object.",
              "Parameters": "none",
              "Returns": "the algorithm name of this TrustManagerFactory object",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
          },
          {
              "Function_name": "getInstance(factorySpi delegate, provider provider, algorithm algorithm)",
              "definition": "Returns a TrustManagerFactory object that acts as a factory for trust managers. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new TrustManagerFactory object encapsulating the TrustManagerFactorySpi implementation from the first Provider that supports the specified algorithm is returned.",
              "Parameters": "algorithm - the standard name of the requested trust management algorithm.",
              "Returns": "a TrustManagerFactory object",
              "Throws": "NoSuchAlgorithmException",
              "Secure_use": "none",
              "Insecure_use": "none"
          },
          {
              "Function_name": "TrustManagerFactory getInstance(factorySpi delegate, provider provider, algorithm algorithm)",
              "definition": "Returns a TrustManagerFactory object that acts as a factory for trust managers.",
              "Parameters": "algorithm - the standard name of the requested trust management algorithm. provider - the name of the provider.",
              "Returns": "the new TrustManagerFactory object.",
              "Throws": "NoSuchAlgorithmException - if no Provider supports a TrustManagerFactorySpi implementation for the specified algorithm. NoSuchProviderException - if the specified provider is not registered. NullPointerException - if algorithm is null.",
              "Secure_use": "Ensure that the specified provider is registered in the security provider list.",
              "Insecure_use": "Using a null algorithm or an unregistered provider."
          },
          {
              "Function_name": "getProvider",
              "definition": "Returns the provider of this TrustManagerFactory object.",
              "Parameters": "none",
              "Returns": "the provider of this TrustManagerFactory object",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
          },
          {
              "Function_name": "init(KeyStore ks)",
              "definition": "Initializes this factory with a source of certificate authorities and related trust material.",
              "Parameters": "KeyStore ks",
              "Returns": "none",
              "Throws": "KeyStoreException",
              "Secure_use": "The provider typically uses a KeyStore as a basis for making trust decisions.",
              "Insecure_use": "none"
          },
          {
              "Function_name": "init(ManagerFactoryParameters spec)",
              "definition": "Initializes this factory with a source of provider-specific trust material.",
              "Parameters": "spec - an implementation of a provider-specific parameter specification",
              "Returns": "none",
              "Throws": "InvalidAlgorithmParameterException - if an error is encountered",
              "Secure_use": "none",
              "Insecure_use": "none"
          },
          {
              "Function_name": "getTrustManagers",
              "definition": "Returns one trust manager for each type of trust material.",
              "Parameters": "none",
              "Returns": "the trust managers",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
          },
          {
              "Function_name": "IllegalStateException",
              "definition": "Thrown to indicate that a method has been invoked at an illegal or inappropriate time.",
              "Parameters": "none",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "Ensure that the factory is properly initialized before invoking methods that depend on it.",
              "Insecure_use": "Invoking methods on an uninitialized factory, leading to IllegalStateException."
          }
      ]      
    },
    {
        "CLASS_name": "KeyAgreement",
        "Description": "API Description:\nThis class facilitates key agreement (or key exchange) protocols. It generates shared secrets using key pairs from KeyPairGenerator, KeyGenerator, or other methods. For each participant in the key exchange, the doPhase method must be called, and multiple parties may participate, though multi-party support depends on the implementation.",
        "API_funtions": [
            {
              "Function_name": "doPhase(PublicKey key, boolean lastPhase)",
              "definition": "For each of the correspondents in the key exchange, doPhase needs to be called. This method is used to process a key received from one of the other parties involved in the key exchange.",
              "Parameters": "PublicKey key, boolean lastPhase",
              "Returns": "KeyAgreement",
              "Throws": "InvalidKeyException, IllegalStateException",
              "Secure_use": "Ensure that the lastPhase flag is correctly set to true when processing the final key in the sequence of exchanges.",
              "Insecure_use": "Setting the lastPhase flag incorrectly may result in an incomplete key agreement process, potentially leading to security vulnerabilities."
            },
            {
              "Function_name": "doPhase(Key key, boolean lastPhase)",
              "definition": "Executes the next phase of this key agreement with the given key that was received from one of the other parties involved in this key agreement.",
              "Parameters": "Key key, boolean lastPhase",
              "Returns": "Key",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "generateSecret",
              "definition": "Generates the shared secret and returns it in a new buffer.",
              "Parameters": "none",
              "Returns": "byte[]",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "generateSecret(byte[] sharedSecret, int offset)",
              "definition": "Generates the shared secret, and places it into the buffer sharedSecret, beginning at offset inclusive.",
              "Parameters": "byte[] sharedSecret, int offset",
              "Returns": "int",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "generateSecret(String algorithm)",
              "definition": "Creates the shared secret and returns it as a SecretKey object of the specified algorithm.",
              "Parameters": "String algorithm",
              "Returns": "SecretKey",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getInstance(String algorithm)",
              "definition": "Returns a KeyAgreement object that implements the specified key agreement algorithm.",
              "Parameters": "String algorithm",
              "Returns": "KeyAgreement",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getInstance(String algorithm, Provider provider)",
              "definition": "Returns a KeyAgreement object that implements the specified key agreement algorithm.",
              "Parameters": "String algorithm, Provider provider",
              "Returns": "KeyAgreement",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getProvider",
              "definition": "Returns the provider of this KeyAgreement object.",
              "Parameters": "none",
              "Returns": "Provider",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "init(Key key)",
              "definition": "Initializes this key agreement with the given key, which is required to contain all the algorithm parameters required for this key agreement.",
              "Parameters": "Key key",
              "Returns": "void",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "init(Key key, AlgorithmParameterSpec params)",
              "definition": "Initializes this key agreement with the given key and set of algorithm parameters.",
              "Parameters": "Key key, AlgorithmParameterSpec params",
              "Returns": "void",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "init(Key key, AlgorithmParameterSpec params, SecureRandom random)",
              "definition": "Initializes this key agreement with the given key, set of algorithm parameters, and source of randomness.",
              "Parameters": "Key key, AlgorithmParameterSpec params, SecureRandom random",
              "Returns": "void",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "init(Key key, SecureRandom random)",
              "definition": "Initializes this key agreement with the given key and source of randomness.",
              "Parameters": "Key key, SecureRandom random",
              "Returns": "void",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getAlgorithm",
              "definition": "Returns the algorithm name of this KeyAgreement object. This is the same name that was specified in one of the getInstance calls that created this KeyAgreement object.",
              "Parameters": "none",
              "Returns": "the algorithm name of this KeyAgreement object.",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getInstance(algorithm algor)",
              "definition": "Returns a KeyAgreement object that implements the specified key agreement algorithm.",
              "Parameters": "algorithm - the standard name of the requested key agreement algorithm.",
              "Returns": "the new KeyAgreement object.",
              "Throws": "NullPointerException - if the specified algorithm is null. NoSuchAlgorithmException - if no Provider supports a KeyAgreementSpi implementation for the specified algorithm.",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getInstance(String algorithm, Provider provider)",
              "definition": "A new KeyAgreement object encapsulating the KeyAgreementSpi implementation from the specified provider is returned.",
              "Parameters": "algorithm - the standard name of the requested key agreement algorithm; provider - the name of the provider.",
              "Returns": "the new KeyAgreement object.",
              "Throws": "NullPointerException - if the specified algorithm is null; NoSuchAlgorithmException - if a KeyAgreementSpi implementation for the specified algorithm is not available from the specified provider; NoSuchProviderException - if the specified provider is not registered in the security provider list; IllegalArgumentException - if the provider is null or empty.",
              "Secure_use": "Ensure that the algorithm and provider are specified correctly and are available in the security provider list.",
              "Insecure_use": "Failing to check the availability of the algorithm and provider, or passing null or empty values for the parameters."
            },
            {
              "Function_name": "getProvider",
              "definition": "Returns the provider of this KeyAgreement object.",
              "Parameters": "none",
              "Returns": "the provider of this KeyAgreement object",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "init(Key key)",
              "definition": "Initializes this key agreement with the given key, which is required to contain all the algorithm parameters required for this key agreement.",
              "Parameters": "key - the party's private information. For example, in the case of the Diffie-Hellman key agreement, this would be the party's own Diffie-Hellman private key.",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            }
          ]        
    },
    {
        "CLASS_name": "PKCS8EncodedKeySpec",
        "Description": "API Description:\nThis class encodes a private key using ASN.1 according to the PrivateKeyInfo type defined by the PKCS#8 standard. It includes a sequence structure with elements such as version, privateKeyAlgorithm, privateKey, and optional attributes.",
        "API_funtions": [
            {
              "Function_name": "getEncoded",
              "definition": "Returns the key bytes, encoded according to the PKCS #8 standard.",
              "Parameters": "none",
              "Returns": "byte[] - the key bytes, encoded according to the PKCS #8 standard.",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getFormat",
              "definition": "Returns the name of the encoding format associated with this key specification.",
              "Parameters": "none",
              "Returns": "String - the name of the encoding format associated with this key specification.",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "PKCS8EncodedKeySpec(byte[] encodedKey)",
              "definition": "Creates a new PKCS8EncodedKeySpec with the given encoded key.",
              "Parameters": "byte[] encodedKey - the key, which is assumed to be encoded according to the PKCS #8 standard. The contents of the array are copied to protect against subsequent modification.",
              "Returns": "none",
              "Throws": "NullPointerException - if encodedKey is null.",
              "Secure_use": "Ensure that the encodedKey is not null before passing it to the constructor.",
              "Insecure_use": "Passing a null value as encodedKey, which will throw a NullPointerException."
            }
      ]      
    },
    {
        "CLASS_name": "SecretKeyFactory",
        "Description": "This API represents a factory for secret keys.",
        "API_funtions": [
            {
              "Function_name": "generateSecret(KeySpec keySpec)",
              "definition": "Converts a given key specification into a secret key object.",
              "Parameters": "KeySpec keySpec",
              "Returns": "SecretKey",
              "Throws": "InvalidKeySpecException",
              "Secure_use": "Use with supported key specifications like DESKeySpec or DESedeKeySpec.",
              "Insecure_use": "Using unsupported or incorrectly specified key specifications."
            },
            {
              "Function_name": "getKeySpec(SecretKey key, Class<T> keySpec)",
              "definition": "Returns a specification of the given key object in the requested format.",
              "Parameters": "SecretKey key, Class<T> keySpec",
              "Returns": "KeySpec",
              "Throws": "InvalidKeySpecException",
              "Secure_use": "Ensure the key object is valid and the requested format is supported.",
              "Insecure_use": "Requesting an unsupported format or using an invalid key object."
            },
            {
              "Function_name": "generateSecret(KeySpec keySpec)",
              "definition": "Generates a SecretKey object from the provided key specification (key material).",
              "Parameters": "KeySpec keySpec",
              "Returns": "SecretKey",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getAlgorithm",
              "definition": "Returns the algorithm name of this SecretKeyFactory object.",
              "Parameters": "none",
              "Returns": "String",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getInstance(String algorithm)",
              "definition": "This method traverses the list of registered security Providers, starting with the most preferred Provider. A new SecretKeyFactory object encapsulating the SecretKeyFactorySpi implementation from the first Provider that supports the specified algorithm is returned.",
              "Parameters": "String algorithm",
              "Returns": "the new SecretKeyFactory object.",
              "Throws": "NullPointerException - if the specified algorithm is null. NoSuchAlgorithmException - if no Provider supports a SecretKeyFactorySpi implementation for the specified algorithm.",
              "Secure_use": "Secure API use:\nskf = SecretKeyFactory.getInstance(PBKDF2WithHmacSHA256)\n# Secure algorithm:\nAES, PBEWithHmacSHA256, AES-128\uff0cPBKDF2WithHmacSHA512\uff0cPBKDF2WithHmacSHA384",
              "Insecure_use": "Insecure API use:\n//Use the broken or risky cryptographic algorithm and may result in the exposure of sensitive information.\nskf = SecretKeyFactory.getInstance(PBKDF2WithHmacSHA1)\n# Insecure algorithm:\nPBKDF2WithHmacSHA1, DES, DESede, ARCFOUR, PBEWithMD5AndDes"
            },
            {
              "Function_name": "getInstance(String algorithm, Provider provider)",
              "definition": "Returns a SecretKeyFactory object that converts secret keys of the specified algorithm.",
              "Parameters": "String algorithm, Provider provider",
              "Returns": "SecretKeyFactory",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getKeySpec(SecretKey key, Class<?> keySpec)",
              "definition": "Returns a specification (key material) of the given key object in the requested format.",
              "Parameters": "SecretKey key, Class<?> keySpec",
              "Returns": "KeySpec",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getProvider",
              "definition": "Returns the provider of this SecretKeyFactory object.",
              "Parameters": "none",
              "Returns": "Provider",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "translateKey(SecretKey key)",
              "definition": "Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this secret-key factory.",
              "Parameters": "SecretKey key",
              "Returns": "SecretKey",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "SecretKeyFactory(SecretKeyFactorySpi keyFacSpi, Provider provider, String algorithm)",
              "definition": "Creates a SecretKeyFactory object.",
              "Parameters": "SecretKeyFactorySpi keyFacSpi, Provider provider, String algorithm",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getInstance(algorithm algorithm)",
              "definition": "Returns a SecretKeyFactory object that converts secret keys of the specified algorithm.",
              "Parameters": "algorithm - the standard name of the requested secret-key algorithm.",
              "Returns": "the new SecretKeyFactory object.",
              "Throws": "NullPointerException - if the specified algorithm is null. NoSuchAlgorithmException - if no Provider supports a SecretKeyFactorySpi implementation for the specified algorithm.",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getInstance(String algorithm, Provider provider)",
              "definition": "Returns a SecretKeyFactory object that converts secret keys of the specified algorithm. A new SecretKeyFactory object encapsulating the SecretKeyFactorySpi implementation from the specified provider is returned.",
              "Parameters": "algorithm - the standard name of the requested secret-key algorithm. provider - the name of the provider.",
              "Returns": "the new SecretKeyFactory object.",
              "Throws": "NoSuchAlgorithmException - if a SecretKeyFactorySpi implementation for the specified algorithm is not available from the specified provider. NullPointerException - if the specified algorithm is null. NoSuchProviderException - if the specified provider is not registered in the security provider list. IllegalArgumentException - if the provider is null or empty.",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getProvider",
              "definition": "Returns the provider of this SecretKeyFactory object.",
              "Parameters": "none",
              "Returns": "the provider of this SecretKeyFactory object",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getAlgorithm",
              "definition": "Returns the algorithm name of this SecretKeyFactory object.",
              "Parameters": "none",
              "Returns": "the algorithm name of this SecretKeyFactory object",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "generateSecret(keySpec spec)",
              "definition": "Generates a SecretKey object from the provided key specification (key material).",
              "Parameters": "keySpec - the specification (key material) of the secret key",
              "Returns": "the secret key",
              "Throws": "InvalidKeySpecException",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getKeySpec(keySpec spec)",
              "definition": "Returns a specification (key material) of the given key object in the requested format.",
              "Parameters": "key - the key, keySpec - the requested format in which the key material shall be returned",
              "Returns": "the underlying key specification (key material) in the requested format",
              "Throws": "InvalidKeySpecException - if the requested key specification is inappropriate for the given key or the given key cannot be dealt with",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "translateKey(SecretKey key)",
              "definition": "Translates a given key using this secret-key factory.",
              "Parameters": "key: the key to be translated",
              "Returns": "the translated key",
              "Throws": "InvalidKeyException - if the given key cannot be processed by this secret-key factory.",
              "Secure_use": "Use with valid keys that are supported by the secret-key factory.",
              "Insecure_use": "Passing invalid keys that cannot be processed by the secret-key factory."
            }
        ]        
    },
    {
        "CLASS_name": "Cipher(String transformation)",
        "Description": "This API provides the functionality of a cryptographic cipher for encryption and decryption.",
        "API_funtions": [
            {
              "Function_name": "getInstance(String transformation, Provider provider)",
              "definition": "This method creates a Cipher object by specifying the name of the requested transformation.",
              "Parameters": "transformation - the name of the transformation to be used, which includes the cryptographic algorithm, mode, and padding.",
              "Returns": "A Cipher object that implements the specified transformation.",
              "Throws": "NoSuchAlgorithmException, NoSuchPaddingException, NoSuchProviderException, IllegalArgumentException",
              "Secure_use": "Ensure the transformation string is correctly specified and matches the required security standards.",
              "Insecure_use": "Using a weak or incorrect transformation string could lead to security vulnerabilities."
            },
            {
              "Function_name": "getInstance(String transformation)",
              "definition": "Creates a Cipher object that implements the specified transformation.",
              "Parameters": "transformation - the name of the transformation, e.g., 'AES/CBC/PKCS5Padding'.",
              "Returns": "A Cipher object implementing the specified transformation.",
              "Throws": "NoSuchAlgorithmException, NoSuchPaddingException",
              "Secure_use": "Use strong transformations like 'AES/GCM/NoPadding'.",
              "Insecure_use": "Using weak transformations or default settings without specifying secure parameters."
            },
            {
              "Function_name": "init(int opmode, Key key)",
              "definition": "Initializes the cipher with the specified key and algorithm parameters.",
              "Parameters": "mode - the operation mode of this cipher (ENCRYPT_MODE, DECRYPT_MODE, etc.), key - the encryption key, params - the algorithm parameters (e.g., GCMParameterSpec).",
              "Returns": "none",
              "Throws": "InvalidKeyException, InvalidAlgorithmParameterException",
              "Secure_use": "Ensure a unique IV for each encryption operation in GCM mode.",
              "Insecure_use": "Reusing IVs in GCM mode, which can lead to forgery attacks."
            },
            {
              "Function_name": "updateAAD(byte[] src)",
              "definition": "Supplies the Additional Associated Data (AAD) for AEAD ciphers.",
              "Parameters": "src - the buffer containing the AAD data.",
              "Returns": "none",
              "Throws": "IllegalStateException",
              "Secure_use": "Provide all AAD data before processing the ciphertext.",
              "Insecure_use": "Supplying AAD data after starting ciphertext processing."
            },
            {
              "Function_name": "updateAAD(byte[] src,int offset,int len)",
              "definition": "Continues a multi-part update of the Additional Authentication Data (AAD), using a subset of the provided buffer.Calls to this method provide AAD to the cipher when operating in modes such as AEAD (GCM/CCM). If this cipher is operating in either GCM or CCM mode, all AAD must be supplied before beginning operations on the ciphertext (via the update and doFinal methods).",
              "Parameters": "src - the buffer containing the AAD. offset - the offset in src where the AAD input starts.len - the number of AAD bytes.",
              "Returns": "none",
              "Throws": "IllegalArgumentException,IllegalStateException,UnsupportedOperationException",
              "Secure_use": "Provide all AAD data before processing the ciphertext.",
              "Insecure_use": "Supplying AAD data after starting ciphertext processing."
            },
            {
              "Function_name": "updateAAD(byte[] src)",
              "definition": "Continues a multi-part update of the Additional Authentication Data (AAD). Calls to this method provide AAD to the cipher when operating in modes such as AEAD (GCM/CCM). If this cipher is operating in either GCM or CCM mode, all AAD must be supplied before beginning operations on the ciphertext (via the update and doFinal methods).All src.remaining() bytes starting at src.position() are processed. Upon return, the input buffer's position will be equal to its limit; its limit will not have changed.",
              "Parameters": "src - the buffer containing the Additional Authentication Data",
              "Returns": "none",
              "Throws": "IllegalArgumentException,IllegalStateException,UnsupportedOperationException",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "update(input buffer)",
              "definition": "Continues a multiple-part encryption or decryption operation.",
              "Parameters": "input - the input buffer.",
              "Returns": "none",
              "Throws": "IllegalStateException",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "doFinal",
              "definition": "Finishes a multiple-part encryption or decryption operation.",
              "Parameters": "none",
              "Returns": "The final ciphertext or plaintext.",
              "Throws": "IllegalBlockSizeException, BadPaddingException",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "doFinal(byte[] input, int inputOffset, int inputLen)",
              "definition": "The doFinal method encrypts or decrypts data depending on the mode of the cipher.",
              "Parameters": "byte[] input, int inputOffset, int inputLen",
              "Returns": "byte[]",
              "Throws": "IllegalBlockSizeException, BadPaddingException",
              "Secure_use": "Ensure the cipher is properly initialized before calling this method.",
              "Insecure_use": "Calling doFinal without proper initialization or after an update with incorrect data can lead to errors."
            },
            {
              "Function_name": "init(int opmode, Key key, AlgorithmParameterSpec params)",
              "definition": "Initializes the cipher with a key and a set of algorithm parameters.",
              "Parameters": "int opmode, Key key, AlgorithmParameterSpec params",
              "Returns": "void",
              "Throws": "InvalidKeyException, InvalidAlgorithmParameterException",
              "Secure_use": "Use a unique IV for each encryption to ensure security.",
              "Insecure_use": "Reusing the same IV with the same key can compromise security."
            },
            {
              "Function_name": "doFinal(byte[] input, int inputOffset, int inputLen)",
              "definition": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation.",
              "Parameters": "input - the input buffer, inputOffset - the offset in input where the input starts, inputLen - the input length",
              "Returns": "the new buffer with the result",
              "Throws": "IllegalStateException, IllegalBlockSizeException, BadPaddingException, AEADBadTagException",
              "Secure_use": "Ensure the cipher is properly initialized before calling doFinal. Handle exceptions appropriately to reset the cipher if needed.",
              "Insecure_use": "Using doFinal without initializing the cipher, or ignoring exceptions which may leave the cipher in an inconsistent state."
            },
            {
              "Function_name": "wrap(Key key)",
              "definition": "Wrap a key.",
              "Parameters": "Key key",
              "Returns": "byte[]",
              "Throws": "IllegalBlockSizeException, InvalidKeyException",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "unwrap(byte[] wrappedKey, String wrappedKeyAlgorithm, int wrappedKeyType)",
              "definition": "Unwrap a previously wrapped key.",
              "Parameters": "wrappedKey - the key to be unwrapped. wrappedKeyAlgorithm - the algorithm associated with the wrapped key. wrappedKeyType - the type of the wrapped key. This must be one of SECRET_KEY, PRIVATE_KEY, or PUBLIC_KEY.",
              "Returns": "none",
              "Throws": "InvalidKeyException, NoSuchAlgorithmException",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getMaxAllowedKeyLength(transformation trans)",
              "definition": "Returns the maximum key length for the specified transformation according to the installed JCE jurisdiction policy files.",
              "Parameters": "transformation - the cipher transformation.",
              "Returns": "the maximum key length in bits or Integer.MAX_VALUE.",
              "Throws": "NullPointerException - if transformation is null. NoSuchAlgorithmException - if transformation is not a valid transformation, i.e. in the form of 'algorithm' or 'algorithm/mode/padding'.",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "doFinal(input buffer)",
              "definition": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation. The data is encrypted or decrypted, depending on how this cipher was initialized.",
              "Parameters": "input - the input buffer, inputOffset - the offset in input where the input starts, inputLen - the input length, output - the buffer for the result, outputOffset - the offset in output where the result is stored",
              "Returns": "the number of bytes stored in output",
              "Throws": "IllegalStateException, IllegalBlockSizeException, BadPaddingException",
              "Secure_use": "Use getOutputSize to determine how big the output buffer should be. Ensure the cipher object is reset if any exception is thrown.",
              "Insecure_use": "none"
            },
            {
              "Function_name": "update(ByteBuffer byteBuffer)",
              "definition": "Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part.",
              "Parameters": "input - the input ByteBuffer, output - the output ByteBuffer",
              "Returns": "int - the number of bytes stored in the output buffer",
              "Throws": "ShortBufferException, IllegalBlockSizeException, BadPaddingException",
              "Secure_use": "Ensure that the output buffer is sufficiently large by using getOutputSize to avoid ShortBufferException. Reset the cipher object after use if any exception is thrown.",
              "Insecure_use": "Using an insufficiently sized output buffer without checking with getOutputSize, or not resetting the cipher object after an exception."
            },
            {
              "Function_name": "getMaxAllowedParameterSpec((String transformation))",
              "definition": "Returns an AlgorithmParameterSpec object which contains the maximum cipher parameter value according to the jurisdiction policy file. If JCE unlimited strength jurisdiction policy files are installed or there is no maximum limit on the parameters for the specified transformation in the policy file, null will be returned.",
              "Parameters": "transformation - the cipher transformation.",
              "Returns": "an AlgorithmParameterSpec which holds the maximum value or null.",
              "Throws": "NullPointerException - if transformation is null. NoSuchAlgorithmException - if transformation is not a valid transformation, i.e. in the form of 'algorithm' or 'algorithm/mode/padding'.",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "init(int opmode, Key key, AlgorithmParameters params, SecureRandom random)",
              "definition": "Initializes this cipher with a key and a source of randomness.",
              "Parameters": "opmode - the operation mode of this cipher (ENCRYPT_MODE, DECRYPT_MODE, WRAP_MODE, UNWRAP_MODE), key - the key, random - SecureRandom instance",
              "Returns": "none",
              "Throws": "InvalidKeyException - if the given key is inappropriate for initializing this cipher, or requires algorithm parameters that cannot be determined from the given key, or if the given key has a keysize that exceeds the maximum allowable keysize. UnsupportedOperationException - if opmode is WRAP_MODE or UNWRAP_MODE but the mode is not implemented by the underlying CipherSpi.",
              "Secure_use": "Ensure that the key is valid and the opmode is supported by the CipherSpi implementation.",
              "Insecure_use": "Using an inappropriate key or an unsupported opmode."
            },
            {
              "Function_name": "doFinal(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset)",
              "definition": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation.",
              "Parameters": "byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset",
              "Returns": "the number of bytes stored in output",
              "Throws": "ShortBufferException, IllegalBlockSizeException, BadPaddingException",
              "Secure_use": "Ensure the cipher is properly initialized before calling doFinal. Handle exceptions appropriately.",
              "Insecure_use": "Calling doFinal without initializing the cipher or not handling exceptions may lead to security vulnerabilities or application crashes."
            }
        ]        
    },
    {
        "CLASS_name": "CipherOutputStream",
        "Description": "API Description:\nCipherOutputStream combines an OutputStream with a Cipher. The write() methods first process data using the cipher before writing to the underlying stream. The cipher must be fully initialized before use.",
        "API_funtions": [
            {
              "Function_name": "write (int b)",
              "definition": "Writes the specified byte to this output stream.",
              "Parameters": "int b - the byte to be written.",
              "Returns": "none",
              "Throws": "IOException - if an I/O error occurs.",
              "Secure_use": "Ensure the cipher is fully initialized before writing data.",
              "Insecure_use": "Using this method without initializing the cipher may result in incorrect data being processed."
            },
            {
              "Function_name": "close",
              "definition": "Closes this output stream and releases any system resources associated with the stream.",
              "Parameters": "none",
              "Returns": "none",
              "Throws": "IOException - if an I/O error occurs.",
              "Secure_use": "Always close the stream to release resources securely.",
              "Insecure_use": "Failing to close the stream may lead to resource leaks."
            },
            {
              "Function_name": "flush",
              "definition": "Flushes this output stream and forces any buffered output bytes to be written out.",
              "Parameters": "none",
              "Returns": "none",
              "Throws": "IOException - if an I/O error occurs.",
              "Secure_use": "Use flush to ensure all data is written out before closing the stream.",
              "Insecure_use": "Not flushing the stream can result in data loss."
            },
            {
              "Function_name": "CipherOutputStream (OutputStream os)",
              "definition": "Constructs a CipherOutputStream from an OutputStream without specifying a Cipher.",
              "Parameters": "OutputStream os",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "CipherOutputStream (OutputStream os, Cipher c)",
              "definition": "Constructs a CipherOutputStream from an OutputStream and a Cipher.",
              "Parameters": "OutputStream os, Cipher c",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "write (byte[] b)",
              "definition": "Writes b.length bytes from the specified byte array to this output stream.",
              "Parameters": "byte[] b",
              "Returns": "void",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "write (byte[] b, int off, int len)",
              "definition": "Writes len bytes from the specified byte array starting at offset off to this output stream.",
              "Parameters": "byte[] b, int off, int len",
              "Returns": "void",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "CipherOutputStream (OutputStream os, Cipher c)",
              "definition": "Constructs a CipherOutputStream from an OutputStream and a Cipher.",
              "Parameters": "OutputStream os, Cipher c",
              "Returns": "none",
              "Throws": "NullPointerException",
              "Secure_use": "Ensure that both OutputStream and Cipher are properly initialized before using.",
              "Insecure_use": "Using a null OutputStream or Cipher may lead to a NullPointerException."
            },
            {
              "Function_name": "write (int b)",
              "definition": "Writes the specified byte to this output stream.",
              "Parameters": "b - the byte.",
              "Returns": "none",
              "Throws": "IOException - if an I/O error occurs.",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "write (byte[] b)",
              "definition": "Writes b.length bytes from the specified byte array to this output stream.",
              "Parameters": "b - the data.",
              "Returns": "none",
              "Throws": "NullPointerException - if b is null. IOException - if an I/O error occurs.",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "write (byte[] b, int off, int len)",
              "definition": "The write method of CipherOutputStream calls the write method of three arguments with the three arguments b, 0, and b.length.",
              "Parameters": "byte[] b, int off, int len",
              "Returns": "none",
              "Throws": "IOException - if an I/O error occurs.",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "flush",
              "definition": "Flushes this output stream and forces any buffered output bytes to be written out.",
              "Parameters": "none",
              "Returns": "none",
              "Throws": "IOException - if an I/O error occurs.",
              "Secure_use": "Use flush to ensure all buffered data is written out before closing the stream.",
              "Insecure_use": "Failing to call flush before close may result in data loss if buffered data is not written."
            },
            {
              "Function_name": "close",
              "definition": "Closes this output stream and releases any system resources associated with the stream.",
              "Parameters": "none",
              "Returns": "none",
              "Throws": "IOException - if an I/O error occurs.",
              "Secure_use": "Ensure that the close method is called in a finally block or use a try-with-resources statement to guarantee that it is called.",
              "Insecure_use": "Failing to close the stream properly, which may lead to resource leaks."
            }
        ]        
    },
    {
        "CLASS_name": "KeyStore",
        "Description": "API Description:\nThe KeyStore class manages cryptographic keys and certificates. It allows storing different types of entries: PrivateKeyEntry, SecretKeyEntry, and TrustedCertificateEntry. These entries are identified by an alias and protect sensitive keys using various mechanisms (e.g., smart cards or files).",
        "API_funtions": [
            {
              "Function_name": "getInstance (String type)",
              "definition": "Returns a keystore object of the specified type.",
              "Parameters": "type - the type of keystore. See the KeyStore section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard keystore types.",
              "Returns": "KeyStore object",
              "Throws": "KeyStoreException if the specified type is not available.",
              "Secure_use": "Use a specific keystore type that matches your security requirements, such as 'JKS'.",
              "Insecure_use": "Relying on the default type without understanding its security implications."
            },
            {
              "Function_name": "getInstance (String type,Provider provider)",
              "definition": "Returns a keystore object of the specified type.",
              "Parameters": "type - the type of keystore. See the KeyStore section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard keystore types. provider - the provider.",
              "Returns": "KeyStore - a keystore object of the specified type.",
              "Throws": "KeyStoreException - if the specified keystore type is not available.",
              "Secure_use": "Ensure to use a secure keystore type and handle exceptions properly.",
              "Insecure_use": "Using a non-secure keystore type or failing to handle exceptions."
            },
            {
              "Function_name": "load (InputStream stream, char[] password)",
              "definition": "Loads this KeyStore from the given input stream.",
              "Parameters": "stream - the input stream from which the keystore is loaded, or null, password - the password used to check the integrity of the keystore, the password used to unlock the keystore, or null",
              "Returns": "void",
              "Throws": "IOException, NoSuchAlgorithmException, CertificateException - if there is an I/O or format problem with the keystore data, if the algorithm for checking the integrity of the keystore cannot be found, or if any of the certificates in the keystore could not be loaded.",
              "Secure_use": "Ensure the password is securely managed and the input stream is from a trusted source.",
              "Insecure_use": "Using a weak password or loading from an untrusted input stream."
            },
            {
              "Function_name": "load (KeyStore.LoadStoreParameter param)",
              "definition": "Loads this KeyStore from the given input stream.",
              "Parameters": "param - the LoadStoreParameter that specifies how to load the keystore, which may be null",
              "Returns": "void",
              "Throws": "IOException, NoSuchAlgorithmException, CertificateException - if there is an I/O or format problem with the keystore data, if the algorithm for checking the integrity of the keystore cannot be found, or if any of the certificates in the keystore could not be loaded.",
              "Secure_use": "Ensure the password is securely managed and the input stream is from a trusted source.",
              "Insecure_use": "Using a weak password or loading from an untrusted input stream."
            },
            {
              "Function_name": "getEntry (String alias, KeyStore.ProtectionParameter protParam)",
              "definition": "Retrieves the requested entry from the keystore using the given alias and protection parameter.",
              "Parameters": "String alias, KeyStore.ProtectionParameter protParam",
              "Returns": "KeyStore.Entry",
              "Throws": "KeyStoreException, NoSuchAlgorithmException, UnrecoverableEntryException",
              "Secure_use": "Ensure the protection parameter is securely managed and the alias is protected.",
              "Insecure_use": "Using a weak or null protection parameter."
            },
            {
              "Function_name": "getPrivateKey",
              "definition": "Retrieves the private key from a PrivateKeyEntry.",
              "Parameters": "none",
              "Returns": "PrivateKey",
              "Throws": "none",
              "Secure_use": "Ensure the private key is handled securely after retrieval.",
              "Insecure_use": "Exposing the private key to insecure environments."
            },
            {
              "Function_name": "SecretKeyEntry (SecretKey secretKey)",
              "definition": "Creates a new SecretKeyEntry with a secret key.",
              "Parameters": "SecretKey secretKey",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "Ensure the secret key is securely generated and managed.",
              "Insecure_use": "Using a weak secret key."
            },
            {
              "Function_name": "setEntry (String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam)",
              "definition": "Stores a KeyStore entry under the specified alias, protecting it with the given protection parameter.",
              "Parameters": "String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam",
              "Returns": "none",
              "Throws": "KeyStoreException",
              "Secure_use": "Use a strong protection parameter to secure the entry.",
              "Insecure_use": "Using a weak or null protection parameter."
            },
            {
              "Function_name": "store (OutputStream stream, char[] password)",
              "definition": "Stores this keystore to the given output stream, and protects its integrity with the given password.",
              "Parameters": "OutputStream stream, char[] password",
              "Returns": "none",
              "Throws": "KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException",
              "Secure_use": "Use a strong password to protect the keystore.",
              "Insecure_use": "Using a weak password or writing to an insecure location."
            },
            {
              "Function_name": "Builder",
              "definition": "A description of a to-be-instantiated KeyStore object.",
              "Parameters": "none",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "CallbackHandlerProtection",
              "definition": "A ProtectionParameter encapsulating a CallbackHandler.",
              "Parameters": "none",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "Entry",
              "definition": "A marker interface for KeyStore entry types.",
              "Parameters": "none",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "LoadStoreParameter",
              "definition": "A marker interface for KeyStore load and store parameters.",
              "Parameters": "none",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "PasswordProtection",
              "definition": "A password-based implementation of ProtectionParameter.",
              "Parameters": "none",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "PrivateKeyEntry",
              "definition": "A KeyStore entry that holds a PrivateKey and corresponding certificate chain.",
              "Parameters": "none",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "aliases",
              "definition": "Lists all the alias names of this keystore.",
              "Parameters": "none",
              "Returns": "Enumeration<String>",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "containsAlias (String alias)",
              "definition": "Checks if the given alias exists in this keystore.",
              "Parameters": "String alias",
              "Returns": "boolean",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "deleteEntry (String alias)",
              "definition": "Deletes the entry identified by the given alias from this keystore.",
              "Parameters": "String alias",
              "Returns": "void",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "entryInstanceOf (String alias, Class<? extends KeyStore.Entry> entryClass)",
              "definition": "Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass.",
              "Parameters": "String alias, Class<? extends KeyStore.Entry> entryClass",
              "Returns": "boolean",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getCertificate (String alias)",
              "definition": "Returns the certificate associated with the given alias.",
              "Parameters": "String alias",
              "Returns": "Certificate",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getCertificateAlias (Certificate cert)",
              "definition": "Returns the (alias) name of the first keystore entry whose certificate matches the given certificate.",
              "Parameters": "Certificate cert",
              "Returns": "String",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getCertificateChain (String alias)",
              "definition": "Returns the certificate chain associated with the given alias.",
              "Parameters": "String alias",
              "Returns": "Certificate[]",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getCreationDate (String alias)",
              "definition": "Returns the creation date of the entry identified by the given alias.",
              "Parameters": "String alias",
              "Returns": "Date",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getDefaultType",
              "definition": "Returns the default keystore type as specified by the keystore provider.",
              "Parameters": "none",
              "Returns": "String",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getKey (String alias, char[] password))",
              "definition": "Returns the key associated with the given alias, using the given password to recover it. The key must have been associated with the alias by a call to setKeyEntry, or by a call to setEntry with a PrivateKeyEntry or SecretKeyEntry.",
              "Parameters": "alias - the alias name, password - the password for recovering the key",
              "Returns": "the requested key, or null if the given alias does not exist or does not identify a key-related entry.",
              "Throws": "KeyStoreException - if the keystore has not been initialized (loaded). NoSuchAlgorithmException - if the algorithm for recovering the key cannot be found. UnrecoverableKeyException - if the key cannot be recovered (e.g., the given password is wrong).",
              "Secure_use": "Ensure the keystore is properly initialized and loaded before calling this function. Use strong, secure passwords for keystore and key recovery.",
              "Insecure_use": "Using weak or default passwords, or attempting to recover keys from an uninitialized or improperly loaded keystore."
            },
            {
              "Function_name": "getCertificateChain",
              "definition": "Returns the certificate chain associated with the given alias. The certificate chain must have been associated with the alias by a call to setKeyEntry, or by a call to setEntry with a PrivateKeyEntry.",
              "Parameters": "alias - the alias name",
              "Returns": "the certificate chain associated with the given alias.",
              "Throws": "KeyStoreException - if the keystore has not been initialized (loaded).",
              "Secure_use": "Ensure the keystore is properly initialized and loaded before calling this function.",
              "Insecure_use": "Attempting to retrieve a certificate chain from an uninitialized or improperly loaded keystore."
            },
            {
              "Function_name": "getCertificate",
              "definition": "Returns the certificate associated with the given alias. If the given alias name identifies an entry created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry, then the trusted certificate contained in that entry is returned. If the given alias name identifies an entry created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry, then the first element of the certificate chain in that entry is returned.",
              "Parameters": "alias - the alias name",
              "Returns": "the certificate, or null if the given alias does not exist or does not contain a certificate.",
              "Throws": "KeyStoreException - if the keystore has not been initialized (loaded).",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "setKeyEntry (String alias, Key key, char[] password, Certificate[] chain)",
              "definition": "Assigns the given key (that has already been protected) to the given alias. If the protected key is of type java.security.PrivateKey, it must be accompanied by a certificate chain certifying the corresponding public key. If the underlying keystore implementation is of type jks, key must be encoded as an EncryptedPrivateKeyInfo as defined in the PKCS #8 standard. If the given alias already exists, the keystore information associated with it is overridden by the given key (and possibly certificate chain).",
              "Parameters": "alias - the alias name, key - the key (in protected format) to be associated with the alias, chain - the certificate chain for the corresponding public key (only useful if the protected key is of type java.security.PrivateKey).",
              "Returns": "none",
              "Throws": "KeyStoreException - if the keystore has not been initialized (loaded), the given key cannot be protected, or this operation fails for some other reason.",
              "Secure_use": "Ensure the key is properly protected and the certificate chain is valid when the key is of type java.security.PrivateKey.",
              "Insecure_use": "Using an unprotected key or invalid certificate chain, or not handling KeyStoreException properly."
            },
            {
              "Function_name": "setCertificateEntry",
              "definition": "Assigns the given trusted certificate to the given alias. If the given alias identifies an existing entry created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry, the trusted certificate in the existing entry is overridden by the given certificate.",
              "Parameters": "alias - the alias name, cert - the certificate",
              "Returns": "none",
              "Throws": "KeyStoreException - if the keystore has not been initialized, or the given alias already exists and does not identify an entry containing a trusted certificate, or this operation fails for some other reason.",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "deleteEntry",
              "definition": "Deletes the entry identified by the given alias from this keystore.",
              "Parameters": "alias - the alias name",
              "Returns": "none",
              "Throws": "KeyStoreException - if the keystore has not been initialized (loaded), or if this operation fails for some other reason.",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "aliases",
              "definition": "Lists all the alias names of this keystore.",
              "Parameters": "none",
              "Returns": "enumeration of the alias names",
              "Throws": "KeyStoreException - if the keystore has not been initialized (loaded).",
              "Secure_use": "Ensure the keystore is properly initialized before calling this method.",
              "Insecure_use": "Calling this method without initializing the keystore."
            },
            {
              "Function_name": "containsAlias",
              "definition": "Checks if the given alias exists in this keystore.",
              "Parameters": "alias - the alias name",
              "Returns": "true if the alias exists, false otherwise",
              "Throws": "KeyStoreException - if the keystore has not been initialized (loaded).",
              "Secure_use": "Verify keystore initialization before checking for an alias.",
              "Insecure_use": "Attempting to check for an alias without initializing the keystore."
            },
            {
              "Function_name": "size",
              "definition": "Retrieves the number of entries in this keystore.",
              "Parameters": "none",
              "Returns": "the number of entries in this keystore",
              "Throws": "KeyStoreException - if the keystore has not been initialized (loaded).",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "isKeyEntry",
              "definition": "Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry.",
              "Parameters": "alias - the alias for the keystore entry to be checked",
              "Returns": "true if the entry identified by the given alias is a key-related entry, false otherwise.",
              "Throws": "KeyStoreException - if the keystore has not been initialized (loaded).",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getCertificateAlias",
              "definition": "Returns the (alias) name of the first keystore entry whose certificate matches the given certificate.",
              "Parameters": "cert - the certificate to match with.",
              "Returns": "the alias name of the first entry with a matching certificate, or null if no such entry exists in this keystore.",
              "Throws": "KeyStoreException - if the keystore has not been initialized (loaded).",
              "Secure_use": "Ensure the keystore is properly initialized before calling this method.",
              "Insecure_use": "Calling this method on an uninitialized keystore."
            },
            {
              "Function_name": "store (OutputStream stream, char[] password)",
              "definition": "Stores this keystore to the given output stream, and protects its integrity with the given password.",
              "Parameters": "stream - the output stream to which this keystore is written; password - the password to generate the keystore integrity check",
              "Returns": "none",
              "Throws": "KeyStoreException - if the keystore has not been initialized (loaded); IOException - if there was an I/O problem with data; NoSuchAlgorithmException - if the appropriate data integrity algorithm could not be found; CertificateException - if any of the certificates included in the keystore data could not be stored",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "store (KeyStore.LoadStoreParameter param)",
              "definition": "Stores this keystore to the given file, and protects its integrity with the given password.",
              "Parameters": "param - the LoadStoreParameter that specifies how to store the keystore, which may be null",
              "Returns": "none",
              "Throws": "KeyStoreException - if the keystore has not been initialized (loaded); IOException - if there was an I/O problem with data; NoSuchAlgorithmException - if the appropriate data integrity algorithm could not be found; CertificateException - if any of the certificates included in the keystore data could not be stored",
              "Secure_use": "none",
              "Insecure_use": "none"
            }
        ]        
    },
    {
        "CLASS_name": "SNIServerName",
        "Description": "API Description:\nThe SNIServerName class represents a server name used in the Server Name Indication (SNI) extension, which is part of the SSL/TLS protocols. It allows clients to specify the server name during handshaking (see RFC 6066). SNIServerName objects are immutable, meaning they cannot be modified once created.",
        "API_funtions": [
            {
              "Function_name": "getServerNames",
              "definition": "Retrieves the server names from the SSL parameters.",
              "Parameters": "none",
              "Returns": "A List of SNIServerName objects representing the server names.",
              "Throws": "none",
              "Secure_use": "Use this function to obtain server names for secure connections.",
              "Insecure_use": "none"
            },
            {
              "Function_name": "setServerNames (List<SNIServerName> serverNames)",
              "definition": "Sets the server names in the SSL parameters.",
              "Parameters": "List<SNIServerName> serverNames",
              "Returns": "void",
              "Throws": "none",
              "Secure_use": "Ensure the list contains valid SNIServerName objects to avoid security issues.",
              "Insecure_use": "Passing null or invalid server names could lead to security vulnerabilities."
            },
            {
              "Function_name": "SNIServerName (int type, byte[] encoded)",
              "definition": "Creates an SNIServerName using the specified name type and encoded value.",
              "Parameters": "type - the type of the server name, encoded - the encoded value of the server name",
              "Returns": "none",
              "Throws": "IllegalArgumentException - if type is not in the range of 0 to 255, inclusive. NullPointerException - if encoded is null",
              "Secure_use": "The encoded byte array is cloned to protect against subsequent modification.",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getType",
              "definition": "Returns the name type of this server name.",
              "Parameters": "none",
              "Returns": "the name type of this server name",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getEncoded",
              "definition": "Returns a copy of the encoded server name value of this server name.",
              "Parameters": "none",
              "Returns": "a copy of the encoded server name value of this server name",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "equals",
              "definition": "Indicates whether some other object is 'equal to' this server name.",
              "Parameters": "other - the reference object with which to compare.",
              "Returns": "true if, and only if, other is of the same class of this object, and has the same name type and encoded value as this server name.",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "hashCode",
              "definition": "Returns a hash code value for this server name.",
              "Parameters": "none",
              "Returns": "The hash code value is generated using the name type and encoded value of this server name.",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "toString",
              "definition": "Returns a string representation of this server name, including the server name type and the encoded server name value in this SNIServerName object.",
              "Parameters": "none",
              "Returns": "a string representation of this server name.",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            }
      ]      
    },
    {
        "CLASS_name": "KeyGenerator",
        "Description": "This class provides the functionality of a secret (symmetric) key generator.",
        "API_funtions": [
            {
              "Function_name": "init (keysize, SecureRandom)",
              "definition": "Initializes the KeyGenerator with a specific key size and source of randomness.",
              "Parameters": "keysize, SecureRandom",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "Use a strong SecureRandom instance and an appropriate key size for the cryptographic algorithm.",
              "Insecure_use": "Using a weak or default SecureRandom instance may result in predictable keys."
            },
            {
              "Function_name": "init (keysize)",
              "definition": "Initializes the KeyGenerator with a specific key size using the highest-priority SecureRandom.",
              "Parameters": "keysize",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "Ensure the system's SecureRandom implementation is strong and up-to-date.",
              "Insecure_use": "Relying on system defaults without verification may lead to weak key generation."
            },
            {
              "Function_name": "init (SecureRandom)",
              "definition": "Initializes the KeyGenerator with a source of randomness.",
              "Parameters": "SecureRandom",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "Use a cryptographically strong SecureRandom instance.",
              "Insecure_use": "Avoid using a predictable or weak randomness source."
            },
            {
              "Function_name": "init (AlgorithmParameterSpec, SecureRandom)",
              "definition": "Initializes the KeyGenerator with algorithm-specific parameters.",
              "Parameters": "AlgorithmParameterSpec, SecureRandom",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "Use SecureRandom for generating secure keys.",
              "Insecure_use": "Using a predictable source of randomness."
            },
            {
              "Function_name": "init (AlgorithmParameterSpec)",
              "definition": "Initializes the KeyGenerator with algorithm-specific parameters using the highest-priority installed provider's SecureRandom or a system-provided source.",
              "Parameters": "AlgorithmParameterSpec",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "Ensure that the highest-priority provider's SecureRandom implementation is secure.",
              "Insecure_use": "Relying on a system-provided source of randomness that may not be secure."
            },
            {
              "Function_name": "generateKey",
              "definition": "Generates a secret key.",
              "Parameters": "none",
              "Returns": "SecretKey",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getAlgorithm",
              "definition": "Returns the algorithm name of this KeyGenerator object.",
              "Parameters": "none",
              "Returns": "String",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getInstance (String algorithm)",
              "definition": "Returns a KeyGenerator object that generates secret keys for the specified algorithm.",
              "Parameters": "String algorithm",
              "Returns": "KeyGenerator",
              "Throws": "none",
              "Secure_use": "Use getInstance with a specific algorithm name to ensure the desired cryptographic strength.",
              "Insecure_use": "Using getInstance without specifying an algorithm may lead to default weak algorithms."
            },
            {
              "Function_name": "getInstance (String algorithm, Provider provider)",
              "definition": "Returns a KeyGenerator object that generates secret keys for the specified algorithm.",
              "Parameters": "String algorithm, Provider provider",
              "Returns": "KeyGenerator",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getProvider",
              "definition": "Returns the provider of this KeyGenerator object.",
              "Parameters": "none",
              "Returns": "Provider",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "init (AlgorithmParameterSpec params)",
              "definition": "Initializes this key generator with the specified parameter set.",
              "Parameters": "AlgorithmParameterSpec params",
              "Returns": "void",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "init (AlgorithmParameterSpec params, SecureRandom random)",
              "definition": "Initializes this key generator with the specified parameter set and a user-provided source of randomness.",
              "Parameters": "AlgorithmParameterSpec params, SecureRandom random",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "Use a secure random source for better security.",
              "Insecure_use": "Using a predictable random source."
            },
            {
              "Function_name": "init (int keysize)",
              "definition": "Initializes this key generator for a certain keysize.",
              "Parameters": "int keysize",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "init (int keysize, SecureRandom random)",
              "definition": "Initializes this key generator for a certain keysize, using a user-provided source of randomness.",
              "Parameters": "int keysize, SecureRandom random",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "Use a secure random source for better security.",
              "Insecure_use": "Using a predictable random source."
            },
            {
              "Function_name": "init (SecureRandom random)",
              "definition": "Initializes this key generator.",
              "Parameters": "SecureRandom random",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "Use a secure random source for better security.",
              "Insecure_use": "Using a predictable random source."
            },
            {
              "Function_name": "getAlgorithm",
              "definition": "Returns the algorithm name of this KeyGenerator object.",
              "Parameters": "none",
              "Returns": "the algorithm name of this KeyGenerator object.",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getInstance",
              "definition": "Returns a KeyGenerator object that generates secret keys for the specified algorithm.",
              "Parameters": "algorithm - the standard name of the requested key algorithm. provider - the name of the provider.",
              "Returns": "A new KeyGenerator object encapsulating the KeyGeneratorSpi implementation from the specified provider.",
              "Throws": "NullPointerException - if the specified algorithm is null. NoSuchAlgorithmException - if no Provider supports a KeyGeneratorSpi implementation for the specified algorithm. NoSuchProviderException - if the specified provider is not registered.",
              "Secure_use": "Ensure that the provider is registered and the algorithm is supported.",
              "Insecure_use": "Using unregistered providers or unsupported algorithms."
            },
            {
              "Function_name": "getProvider",
              "definition": "Returns the provider of this KeyGenerator object.",
              "Parameters": "none",
              "Returns": "the provider of this KeyGenerator object",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "init (SecureRandom random )",
              "definition": "Initializes this key generator.",
              "Parameters": "SecureRandom random - the source of randomness for this generator",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            }
        ] 
    },
    {
        "CLASS_name": "PBEKeySpec",
        "Description": "PBEKeySpec is used in Password-Based Encryption (PBE) to generate a cryptographic key using a password, salt, iteration count, and desired key length.",
        "API_funtions": [
            {
              "Function_name": "PBEKeySpec",
              "definition": "Constructor that takes a password.",
              "Parameters": "char[] password",
                  "Returns": "none",
                  "Throws": "none",
                  "Secure_use": "Use a char array to store passwords to allow overwriting the data when no longer needed.",
                  "Insecure_use": "Storing passwords as immutable String objects, which cannot be overwritten."
                },
                {
                  "Function_name": "PBEKeySpec",
                  "definition": "Constructor that takes a password, salt, iteration count for generating PBEKey of fixed-key-size PBE ciphers.",
                  "Parameters": "char[] password, byte[] salt, int iterationCount",
                  "Returns": "none",
                  "Throws": "none",
                  "Secure_use": "Use salt and iteration count to enhance security.",
                  "Insecure_use": "Using weak or no salt and low iteration count."
                },
                {
                  "Function_name": "PBEKeySpec",
                  "definition": "Constructor that takes a password, salt, iteration count, and to-be-derived key length for generating PBEKey of variable-key-size PBE ciphers.",
                  "Parameters": "char[] password, byte[] salt, int iterationCount, int keyLength",
                  "Returns": "none",
                  "Throws": "none",
                  "Secure_use": "Ensure appropriate key length for security requirements. Ensure appropriate salt more than 1000. Ensure salt is random. ",
                  "Insecure_use": "Using insufficient key length for cryptographic security."
                },
                {
                  "Function_name": "clearPassword",
                  "definition": "Clears the internal copy of the password.",
                  "Parameters": "none",
                  "Returns": "void",
                  "Throws": "none",
                  "Secure_use": "Call this method to clear sensitive data from memory.",
                  "Insecure_use": "Failing to clear password data after use."
                },
                {
                  "Function_name": "getIterationCount",
                  "definition": "Returns the iteration count or 0 if not specified.",
                  "Parameters": "none",
                  "Returns": "int",
                  "Throws": "none",
                  "Secure_use": "none",
                  "Insecure_use": "none"
                },
                {
                  "Function_name": "getKeyLength",
                  "definition": "Returns the to-be-derived key length or 0 if not specified.",
                  "Parameters": "none",
                  "Returns": "int",
                  "Throws": "none",
                  "Secure_use": "none",
                  "Insecure_use": "none"
                },
                {
                  "Function_name": "getPassword",
                  "definition": "Returns a copy of the password.",
                  "Parameters": "none",
                  "Returns": "char[]",
                  "Throws": "none",
                  "Secure_use": "none",
                  "Insecure_use": "none"
                },
                {
                  "Function_name": "getSalt",
                  "definition": "Returns a copy of the salt or null if not specified.",
                  "Parameters": "none",
                  "Returns": "byte[]",
                  "Throws": "none",
                  "Secure_use": "none",
                  "Insecure_use": "none"
                },
                {
                  "Function_name": "PBEKeySpec (char[] password)",
                  "definition": "Constructor that takes a password. An empty char[] is used if null is specified. Note: password is cloned before it is stored in the new PBEKeySpec object.",
                  "Parameters": "char[] password",
                  "Returns": "none",
                  "Throws": "none",
                  "Secure_use": "none",
                  "Insecure_use": "none"
                },
                {
                  "Function_name": "PBEKeySpec (char[] password, byte[] salt, int iterationCount)",
                  "definition": "Constructor that takes a password, salt, iteration count, and to-be-derived key length for generating PBEKey of variable-key-size PBE ciphers.",
                  "Parameters": "password - the password; salt - the salt; iterationCount - the iteration count; keyLength - the to-be-derived key length.",
                  "Returns": "none",
                  "Throws": "NullPointerException - if salt is null; IllegalArgumentException - if salt is empty, i.e. 0-length, iterationCount or keyLength is not positive.",
                  "Secure_use": "Ensure that the salt is not null or empty, and that iterationCount and keyLength are positive.",
                  "Insecure_use": "Using a null or empty salt, or non-positive iterationCount or keyLength."
                },
                {
                  "Function_name": "getPassword",
                  "definition": "Returns a copy of the password.",
                  "Parameters": "none",
                  "Returns": "the password",
                  "Throws": "none",
                  "Secure_use": "It is the caller's responsibility to zero out the password information after it is no longer needed.",
                  "Insecure_use": "none"
                },
                {
                  "Function_name": "getSalt",
                  "definition": "Returns a copy of the salt or null if not specified.",
                  "Parameters": "none",
                  "Returns": "a copy of the salt.",
                  "Throws": "none",
                  "Secure_use": "Ensure to zero out the salt information after it is no longer needed.",
                  "Insecure_use": "Failing to clear the salt information when it is no longer needed."
                },
                {
                  "Function_name": "getIterationCount",
                  "definition": "Returns the iteration count or 0 if not specified.",
                  "Parameters": "none",
                  "Returns": "the iteration count.",
                  "Throws": "none",
                  "Secure_use": "none",
                  "Insecure_use": "none"
                },
                {
                  "Function_name": "getKeyLength",
                  "definition": "Returns the to-be-derived key length or 0 if not specified.",
                  "Parameters": "none",
                  "Returns": "the to-be-derived key length.",
                  "Throws": "none",
                  "Secure_use": "none",
                  "Insecure_use": "none"
                }
              ]
    },
    {
        "CLASS_name": "SNIHostName",
        "Description": "1. API Description:\nSNIHostName represents a server name in the Server Name Indication (SNI) extension. It holds a fully qualified DNS hostname encoded in ASCII. The use of A-labels allows support for Internationalized Domain Names (IDN).",
        "API_funtions": [
            {
              "Function_name": "SNIHostName(byte[] encoded)",
              "definition": "Creates an SNIHostName using the specified encoded value.",
              "Parameters": "byte[] encoded",
              "Returns": "SNIHostName object",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "SNIHostName(String hostname)",
              "definition": "Creates an SNIHostName using the specified hostname.",
              "Parameters": "String hostname",
              "Returns": "SNIHostName object",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "createSNIMatcher(String regex)",
              "definition": "Creates an SNIMatcher object for SNIHostNames.",
              "Parameters": "String regex",
              "Returns": "SNIMatcher object",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "equals(Object other)",
              "definition": "Compares this server name to the specified object.",
              "Parameters": "Object other",
              "Returns": "boolean",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getAsciiName()",
              "definition": "Returns the StandardCharsets.US_ASCII-compliant hostname of this SNIHostName object.",
              "Parameters": "none",
              "Returns": "String",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "hashCode()",
              "definition": "Returns a hash code value for this SNIHostName.",
              "Parameters": "none",
              "Returns": "int",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "toString()",
              "definition": "Returns a string representation of the object, including the DNS hostname in this SNIHostName object.",
              "Parameters": "none",
              "Returns": "String",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "SNIHostName (String hostname)",
              "definition": "Creates an SNIHostName using the specified hostname.",
              "Parameters": "hostname - the hostname of this server name",
              "Returns": "none",
              "Throws": "IllegalArgumentException if hostname is empty, ends with a trailing dot, or is not a valid Internationalized Domain Name (IDN) compliant with the RFC 3490 specification.",
              "Secure_use": "Ensure that the hostname is a valid and compliant Internationalized Domain Name (IDN).",
              "Insecure_use": "Using a hostname that is empty, ends with a trailing dot, or is not IDN compliant."
            },
            {
              "Function_name": "SNIHostName(byte[] encoded)",
              "definition": "Creates an SNIHostName using the specified encoded value. This method is normally used to parse the encoded name value in a requested SNI extension.",
              "Parameters": "encoded - a byte array representing the encoded hostname",
              "Returns": "none",
              "Throws": "NullPointerException - if hostname is null, IllegalArgumentException - if hostname is illegal",
              "Secure_use": "It is strongly recommended that this constructor is only used to parse the encoded name value in a requested SNI extension. Always use StandardCharsets.US_ASCII-compliant charset and enforce the restrictions on ASCII characters in hostnames.",
              "Insecure_use": "Using this constructor for purposes other than parsing the encoded name value in a requested SNI extension may lead to non-compliance with RFC 6066."
            },
            {
              "Function_name": "getAsciiName",
              "definition": "Returns the StandardCharsets.US_ASCII-compliant hostname of this SNIHostName object.",
              "Parameters": "none",
              "Returns": "the StandardCharsets.US_ASCII-compliant hostname of this SNIHostName object",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "equals",
              "definition": "Compares this instance with the specified object for equality.",
              "Parameters": "other - the other server name object to compare with.",
              "Returns": "true if, and only if, the other is considered equal to this instance",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "hashCode",
              "definition": "Returns a hash code value for this SNIHostName.",
              "Parameters": "none",
              "Returns": "a hash code value for this SNIHostName",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "toString",
              "definition": "Returns a string representation of the object, including the DNS hostname in this SNIHostName object.",
              "Parameters": "none",
              "Returns": "a string representation of the object",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "toString",
              "definition": "Overrides toString in class SNIServerName",
              "Parameters": "none",
              "Returns": "a string representation of the object",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "createSNIMatcher",
              "definition": "Creates an SNIMatcher object for SNIHostNames.",
              "Parameters": "String regex",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "This method can be used by a server to verify the acceptable SNIHostNames.",
              "Insecure_use": "none"
            },
            {
              "Function_name": "createSNIMatcher",
              "definition": "Creates a SNIMatcher object for matching server name indications (SNI) based on a regular expression pattern.",
              "Parameters": "regex - the regular expression pattern representing the hostname(s) to match",
              "Returns": "a SNIMatcher object for SNIHostNames",
              "Throws": "NullPointerException - if regex is null, PatternSyntaxException - if the regular expression's syntax is invalid",
              "Secure_use": "Use valid regular expressions to define the expected SNI hostnames.",
              "Insecure_use": "Avoid using overly broad regex patterns that may unintentionally match unintended hostnames."
            }
      ]      
    },
    {
        "CLASS_name": "CipherInputStream",
        "Description": "1. API Description:\nA CipherInputStream combines an InputStream and a Cipher, allowing data read from the stream to be automatically processed by the cipher for encryption or decryption.",
        "API_funtions": [
            {
              "Function_name": "CipherInputStream",
              "definition": "A CipherInputStream is composed of an InputStream and a Cipher so that read() methods return data that are read in from the underlying InputStream but have been additionally processed by the Cipher. The Cipher must be fully initialized before being used by a CipherInputStream.",
              "Parameters": "none",
              "Returns": "none",
              "Throws": "BadPaddingException and other exceptions thrown by failed integrity checks during decryption, although these are caught and not re-thrown.",
              "Secure_use": "Use the Cipher API directly for applications that require authenticated encryption.",
              "Insecure_use": "Using this class with decryption in an authenticated mode of operation (e.g. GCM) as it may not inform the client of integrity check failures."
            },
            {
              "Function_name": "CipherInputStream",
              "definition": "Constructs a CipherInputStream from an InputStream without specifying a Cipher.",
              "Parameters": "InputStream is",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "CipherInputStream",
              "definition": "Constructs a CipherInputStream from an InputStream and a Cipher.",
              "Parameters": "InputStream is, Cipher c",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "available",
              "definition": "Returns the number of bytes that can be read from this input stream without blocking.",
              "Parameters": "none",
              "Returns": "int",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "close",
              "definition": "Closes this input stream and releases any system resources associated with the stream.",
              "Parameters": "none",
              "Returns": "void",
              "Throws": "none",
              "Secure_use": "Ensure the stream is closed after operations to free resources.",
              "Insecure_use": "Leaving the stream open may lead to resource leaks."
            },
            {
              "Function_name": "markSupported",
              "definition": "Tests if this input stream supports the mark and reset methods, which it does not.",
              "Parameters": "none",
              "Returns": "boolean",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "read (byte[] b)",
              "definition": "Reads up to b.length bytes of data from this input stream into an array of bytes.",
              "Parameters": "byte[] b",
              "Returns": "int",
              "Throws": "none",
              "Secure_use": "Ensure the array is properly sized.",
              "Insecure_use": "Using uninitialized or incorrectly sized arrays."
            },
            {
              "Function_name": "read (byte[] b, int off, int len)",
              "definition": "Reads up to len bytes of data from this input stream into an array of bytes.",
              "Parameters": "byte[] b, int off, int len",
              "Returns": "int",
              "Throws": "none",
              "Secure_use": "Validate offset and length to be within array bounds.",
              "Insecure_use": "Ignoring array bounds may cause IndexOutOfBoundsException."
            },
            {
              "Function_name": "skip (long n)",
              "definition": "Skips n bytes of input from the bytes that can be read from this input stream without blocking.",
              "Parameters": "long n",
              "Returns": "long",
              "Throws": "none",
              "Secure_use": "Check the return value to confirm the number of bytes skipped.",
              "Insecure_use": "Assuming all bytes requested to skip are always skipped."
            },
            {
              "Function_name": "CipherInputStream (InputStream is, Cipher c)",
              "definition": "Constructs a CipherInputStream from an InputStream and a Cipher. If the specified input stream or cipher is null, a NullPointerException may be thrown later when they are used.",
              "Parameters": "is - the to-be-processed input stream, c - an initialized Cipher object",
              "Returns": "none",
              "Throws": "NullPointerException may be thrown later when they are used.",
              "Secure_use": "Ensure both InputStream and Cipher are not null before constructing CipherInputStream.",
              "Insecure_use": "Passing null for either InputStream or Cipher."
            },
            {
              "Function_name": "CipherInputStream (InputStream is)",
              "definition": "Constructs a CipherInputStream from an InputStream without specifying a Cipher. This has the effect of constructing a CipherInputStream using a NullCipher.",
              "Parameters": "is - the to-be-processed input stream",
              "Returns": "none",
              "Throws": "NullPointerException may be thrown later when it is used.",
              "Secure_use": "Ensure InputStream is not null before constructing CipherInputStream.",
              "Insecure_use": "Passing null for InputStream."
            },
            {
              "Function_name": "read",
              "definition": "Reads the next byte of data from this input stream.",
              "Parameters": "none",
              "Returns": "the next byte of data, or -1 if the end of the stream is reached.",
              "Throws": "IOException",
              "Secure_use": "Handle IOException appropriately and check for end of stream.",
              "Insecure_use": "Ignoring IOException or not checking for end of stream."
            },
            {
              "Function_name": "read",
              "definition": "Reads up to b.length bytes of data from this input stream into an array of bytes.",
              "Parameters": "b - the buffer into which the data is read.",
              "Returns": "the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached.",
              "Throws": "IOException - if an I/O error occurs.",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "read (byte[] b, int off, int len)",
              "definition": "Reads up to len bytes of data from this input stream into an array of bytes. This method blocks until some input is available. If the first argument is null, up to len bytes are read and discarded.",
              "Parameters": "b - the buffer into which the data is read. off - the start offset in the destination array buf len - the maximum number of bytes read.",
              "Returns": "the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached.",
              "Throws": "IOException - if an I/O error occurs.",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "skip (long n)",
              "definition": "Skips n bytes of input from the bytes that can be read from this input stream without blocking. Fewer bytes than requested might be skipped. The actual number of bytes skipped is equal to n or the result of a call to available, whichever is smaller. If n is less than zero, no bytes are skipped.",
              "Parameters": "n - the number of bytes to be skipped.",
              "Returns": "the actual number of bytes skipped.",
              "Throws": "IOException - if an I/O error occurs.",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "available",
              "definition": "Returns the number of bytes that can be read from this input stream without blocking.",
              "Parameters": "none",
              "Returns": "the number of bytes that can be read from this input stream without blocking.",
              "Throws": "IOException - if an I/O error occurs.",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "close",
              "definition": "Closes this input stream and releases any system resources associated with the stream.",
              "Parameters": "none",
              "Returns": "none",
              "Throws": "IOException - if an I/O error occurs.",
              "Secure_use": "Ensure that close is called in a finally block or use try-with-resources to automatically close the stream.",
              "Insecure_use": "Failing to close the stream, which can lead to resource leaks."
            },
            {
              "Function_name": "markSupported",
              "definition": "Tests if this input stream supports the mark and reset methods, which it does not.",
              "Parameters": "none",
              "Returns": "false, since this class does not support the mark/reset functionality.",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            }
        ]  
    },
    {
        "CLASS_name": "HttpURLConnection",
        "Description": "API Description: HttpsURLConnection extends HttpURLConnection to support HTTPS-specific features. It adheres to the HTTPS protocol (see W3C and RFC 2818). This class utilizes HostnameVerifier and SSLSocketFactory, with default implementations for both.",
        "API_funtions": [
          {
            "Function_name": "getCipherSuite",
            "definition": "Returns the cipher suite in use on this connection.",
            "Parameters": "none",
            "Returns": "String",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "getDefaultHostnameVerifier",
            "definition": "Gets the default HostnameVerifier that is inherited by new instances of this class.",
            "Parameters": "none",
            "Returns": "HostnameVerifier",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "getDefaultSSLSocketFactory",
            "definition": "Gets the default static SSLSocketFactory that is inherited by new instances of this class.",
            "Parameters": "none",
            "Returns": "SSLSocketFactory",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "getHostnameVerifier",
            "definition": "Gets the HostnameVerifier in place on this instance.",
            "Parameters": "none",
            "Returns": "HostnameVerifier",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "getLocalCertificates",
            "definition": "Returns the certificate(s) that were sent to the server during handshaking.",
            "Parameters": "none",
            "Returns": "Certificate[]",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "getLocalPrincipal",
            "definition": "Returns the principal that was sent to the server during handshaking.",
            "Parameters": "none",
            "Returns": "Principal",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "getServerCertificates",
            "definition": "Returns the server's certificate chain which was established as part of defining the session.",
            "Parameters": "none",
            "Returns": "Certificate[]",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "getSSLSocketFactory",
            "definition": "Gets the SSL socket factory to be used when creating sockets for secure https URL connections.",
            "Parameters": "none",
            "Returns": "SSLSocketFactory",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "setDefaultHostnameVerifier (HostnameVerifier v)",
            "definition": "Sets the default HostnameVerifier inherited by a new instance of this class.",
            "Parameters": "HostnameVerifier v",
            "Returns": "void",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "setDefaultSSLSocketFactory (SSLSocketFactory sf)",
            "definition": "Sets the default SSLSocketFactory inherited by new instances of this class.",
            "Parameters": "SSLSocketFactory sf",
            "Returns": "void",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "setSSLSocketFactory (SSLSocketFactory sf)",
            "definition": "Sets the SSLSocketFactory to be used when this instance creates sockets for secure https URL connections.",
            "Parameters": "SSLSocketFactory sf",
            "Returns": "none",
            "Throws": "none",
            "Secure_use": "Use a properly configured and trusted SSLSocketFactory.",
            "Insecure_use": "Using an SSLSocketFactory that does not properly validate SSL certificates."
          },
          {
            "Function_name": "getCipherSuite",
            "definition": "Returns the cipher suite in use on this connection.",
            "Parameters": "none",
            "Returns": "the cipher suite",
            "Throws": "IllegalStateException - if this method is called before the connection has been established.",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "getLocalCertificates",
            "definition": "Returns the certificate(s) that were sent to the server during handshaking.",
            "Parameters": "none",
            "Returns": "an ordered array of certificates, with the client's own certificate first followed by any certificate authorities. If no certificates were sent, then null is returned.",
            "Throws": "IllegalStateException - if this method is called before the connection has been established.",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "getServerCertificates",
            "definition": "Returns the server's certificate chain which was established as part of defining the session.",
            "Parameters": "none",
            "Returns": "an ordered array of server certificates, with the peer's own certificate first followed by any certificate authorities.",
            "Throws": [
              "SSLPeerUnverifiedException - if the peer is not verified.",
              "IllegalStateException - if this method is called before the connection has been established."
            ],
            "Secure_use": "Use this method only when using certificate-based cipher suites.",
            "Insecure_use": "Using this method with non-certificate-based cipher suites, such as Kerberos, will throw an SSLPeerUnverifiedException."
          },
          {
            "Function_name": "getPeerPrincipal",
            "definition": "Returns the server's principal which was established as part of defining the session.",
            "Parameters": "none",
            "Returns": "the server's principal. Returns an X500Principal of the end-entity certificate for X509-based cipher suites, and KerberosPrincipal for Kerberos cipher suites.",
            "Throws": "SSLPeerUnverifiedException - if the peer is not verified.",
            "Secure_use": "Subclasses should override this method to ensure proper behavior.",
            "Insecure_use": "If not overridden, it will default to returning the X500Principal of the server's end-entity certificate for certificate-based cipher suites, or throw an SSLPeerUnverifiedException for non-certificate-based cipher suites, such as Kerberos."
          },
          {
            "Function_name": "getLocalPrincipal",
            "definition": "Returns the principal that was sent to the server during handshaking.",
            "Parameters": "none",
            "Returns": "the principal sent to the server. Returns an X500Principal of the end-entity certificate for X509-based cipher suites, and KerberosPrincipal for Kerberos cipher suites. If no principal was sent, then null is returned.",
            "Throws": "IllegalStateException - if this method is called before the connection has been established.",
            "Secure_use": "Subclasses should override this method to ensure the correct principal is returned.",
            "Insecure_use": "If not overridden, it defaults to returning the X500Principal of the end-entity certificate or null for non-certificate based ciphersuites."
          },
          {
            "Function_name": "setDefaultHostnameVerifier",
            "definition": "Sets the default HostnameVerifier inherited by a new instance of this class. If this method is not called, the default HostnameVerifier assumes the connection should not be permitted.",
            "Parameters": "v - the default host name verifier",
            "Returns": "none",
            "Throws": "IllegalArgumentException - if the HostnameVerifier parameter is null. SecurityException - if a security manager exists and its checkPermission method does not allow SSLPermission('setHostnameVerifier')",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "getDefaultHostnameVerifier",
            "definition": "Gets the default HostnameVerifier that is inherited by new instances of this class.",
            "Parameters": "none",
            "Returns": "the default host name verifier",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "setHostnameVerifier",
            "definition": "Sets the HostnameVerifier for this instance. New instances of this class inherit the default static hostname verifier set by setDefaultHostnameVerifier. Calls to this method replace this object's HostnameVerifier.",
            "Parameters": "v - the host name verifier",
            "Returns": "none",
            "Throws": "IllegalArgumentException - if the HostnameVerifier parameter is null. SecurityException - if a security manager exists and its checkPermission method does not allow SSLPermission('setHostnameVerifier')",
            "Secure_use": "none",
            "Insecure_use": "none"
          }
    ]
    },
    {
        "CLASS_name": "Random",
        "Description": "An instance of this class is used to generate a stream of pseudorandom numbers. The class uses a 48-bit seed, which is modified using a linear congruential formula",
        "API_funtions": [
            {
              "Function_name": "Random",
              "definition": "An instance of this class is used to generate a stream of pseudorandom numbers. The class uses a 48-bit seed, which is modified using a linear congruential formula.",
              "Parameters": "none",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "Random",
              "definition": "Creates a new random number generator.",
              "Parameters": "none",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "Instances of java.util.Random are not cryptographically secure."
            },
            {
              "Function_name": "Random(long seed)",
              "definition": "Creates a new random number generator using a single long seed.",
              "Parameters": "long seed",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "Instances of java.util.Random are not cryptographically secure."
            },
            {
              "Function_name": "doubles",
              "definition": "Returns an effectively unlimited stream of pseudorandom double values, each between zero (inclusive) and one (exclusive).",
              "Parameters": "none",
              "Returns": "DoubleStream",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "doubles(double randomNumberOrigin, double randomNumberBound)",
              "definition": "Returns an effectively unlimited stream of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive).",
              "Parameters": "double randomNumberOrigin, double randomNumberBound",
              "Returns": "DoubleStream",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "doubles(long streamSize)",
              "definition": "Returns a stream producing the given streamSize number of pseudorandom double values, each between zero (inclusive) and one (exclusive).",
              "Parameters": "long streamSize",
              "Returns": "DoubleStream",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "doubles(long streamSize, double randomNumberOrigin, double randomNumberBound)",
              "definition": "Returns a stream producing the given streamSize number of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive).",
              "Parameters": "long streamSize, double randomNumberOrigin, double randomNumberBound",
              "Returns": "DoubleStream",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "ints",
              "definition": "Returns an effectively unlimited stream of pseudorandom int values.",
              "Parameters": "none",
              "Returns": "IntStream",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "ints(int randomNumberOrigin, int randomNumberBound)",
              "definition": "Returns an effectively unlimited stream of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive).",
              "Parameters": "int randomNumberOrigin, int randomNumberBound",
              "Returns": "IntStream",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "ints(long streamSize)",
              "definition": "Returns a stream producing the given streamSize number of pseudorandom int values.",
              "Parameters": "long streamSize",
              "Returns": "IntStream",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "ints(long streamSize, int randomNumberOrigin, int randomNumberBound)",
              "definition": "Returns a stream producing the given streamSize number of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive).",
              "Parameters": "long streamSize, int randomNumberOrigin, int randomNumberBound",
              "Returns": "IntStream",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "longs",
              "definition": "Returns an effectively unlimited stream of pseudorandom long values.",
              "Parameters": "none",
              "Returns": "LongStream",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "longs (long streamSize)",
              "definition": "Returns a stream producing the given streamSize number of pseudorandom long values.",
              "Parameters": "long streamSize",
              "Returns": "LongStream",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "longs(long randomNumberOrigin, long randomNumberBound)",
              "definition": "Returns an effectively unlimited stream of pseudorandom long values, each conforming to the given origin (inclusive) and bound (exclusive).",
              "Parameters": "long randomNumberOrigin, long randomNumberBound",
              "Returns": "LongStream",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "next (int bits)",
              "definition": "Generates the next pseudorandom number.",
              "Parameters": "int bits",
              "Returns": "int",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "nextBoolean",
              "definition": "Returns the next pseudorandom, uniformly distributed boolean value from this random number generator's sequence.",
              "Parameters": "none",
              "Returns": "boolean",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "nextBytes (byte[] bytes)",
              "definition": "Generates random bytes and places them into a user-supplied byte array.",
              "Parameters": "byte[] bytes",
              "Returns": "void",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "nextGaussian",
              "definition": "Returns the next pseudorandom, Gaussian ('normally') distributed double value with mean 0.0 and standard deviation 1.0 from this random number generator's sequence.",
              "Parameters": "none",
              "Returns": "double",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "nextInt",
              "definition": "Returns the next pseudorandom, uniformly distributed int value from this random number generator's sequence.",
              "Parameters": "none",
              "Returns": "the next pseudorandom, uniformly distributed int value from this random number generator's sequence",
              "Throws": "none",
              "Secure_use": "protected static final SecureRandom random = new SecureRandom();",
              "Insecure_use": "Insecure API use:\n//Software generates predictable values in a context requiring unpredictability\nprotected static final Random random = new Random()"
            },
            {
              "Function_name": "nextInt (int bound)",
              "definition": "Generates a random integer within the specified bound.",
              "Parameters": "int bound: the upper bound (exclusive) of the random number to be generated. Must be positive.",
              "Returns": "int: a random integer between 0 (inclusive) and the specified bound (exclusive).",
              "Throws": "IllegalArgumentException: if the bound is less than or equal to 0.",
              "Secure_use": "Use a positive integer for the bound to avoid exceptions.",
              "Insecure_use": "Using a non-positive integer for the bound will result in an IllegalArgumentException."
            },
            {
              "Function_name": "nextGaussian",
              "definition": "Generates a pseudorandom double value from a normal distribution with mean 0.0 and standard deviation 1.0.",
              "Parameters": "none",
              "Returns": "double - a pseudorandomly generated value from the normal distribution",
              "Throws": "none",
              "Secure_use": "Thread-safe implementation ensures that it can be used in multi-threaded environments without additional synchronization.",
              "Insecure_use": "none"
            },
            {
              "Function_name": "ints (int streamSize)",
              "definition": "Returns a stream producing the given streamSize number of pseudorandom int values.",
              "Parameters": "streamSize - the number of values to generate",
              "Returns": "a stream of pseudorandom int values",
              "Throws": "IllegalArgumentException - if streamSize is less than zero",
              "Secure_use": "Ensure that streamSize is a non-negative value to avoid IllegalArgumentException.",
              "Insecure_use": "Passing a negative value for streamSize, which would result in an IllegalArgumentException."
            },
            {
              "Function_name": "ints(long streamSize, int randomNumberOrigin, int randomNumberBound)",
              "definition": "Returns a stream producing the given streamSize number of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive).",
              "Parameters": "long streamSize, int randomNumberOrigin, int randomNumberBound",
              "Returns": "a stream of pseudorandom int values",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "nextInt (int origin, int bound)",
              "definition": "Generates a pseudorandom integer value between the specified origin (inclusive) and bound (exclusive).",
              "Parameters": "origin - the inclusive lower bound of the random value; bound - the exclusive upper bound of the random value",
              "Returns": "An integer value between the specified origin (inclusive) and bound (exclusive).",
              "Throws": "none",
              "Secure_use": "Ensure that the origin is less than the bound to avoid infinite loops.",
              "Insecure_use": "Using an origin greater than or equal to the bound, which may result in an infinite loop."
            },
            {
              "Function_name": "ints (int randomNumberOrigin, int randomNumberBound)",
              "definition": "Returns an effectively unlimited stream of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive).",
              "Parameters": "int randomNumberOrigin, int randomNumberBound",
              "Returns": "IntStream",
              "Throws": "IllegalArgumentException - if streamSize is less than zero, or randomNumberOrigin is greater than or equal to randomNumberBound",
              "Secure_use": "Ensure that randomNumberOrigin is less than randomNumberBound to avoid IllegalArgumentException.",
              "Insecure_use": "Using a randomNumberOrigin that is greater than or equal to randomNumberBound."
            },
            {
              "Function_name": "longs (long streamSize)",
              "definition": "Returns a stream producing the given streamSize number of pseudorandom long values.",
              "Parameters": "streamSize - the number of values to generate",
              "Returns": "a stream of pseudorandom long values",
              "Throws": "IllegalArgumentException - if streamSize is less than zero",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "longs (long streamSize)",
              "definition": "Returns a stream producing the given streamSize number of pseudorandom long values.",
              "Parameters": "streamSize - the number of pseudorandom long values to generate",
              "Returns": "A pseudorandom long value is generated as if it's the result of calling the method nextLong().",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "long nextLong(long origin, long bound)",
              "definition": "Generates a pseudorandom long value within the specified origin (inclusive) and bound (exclusive).",
              "Parameters": "long origin, long bound",
              "Returns": "A pseudorandom long value within the specified range.",
              "Throws": "none",
              "Secure_use": "Ensure that the origin is less than the bound to avoid an infinite loop.",
              "Insecure_use": "Using an origin greater than or equal to the bound may cause incorrect results or infinite loops."
            },
            {
              "Function_name": "longs (long randomNumberOrigin, long randomNumberBound)",
              "definition": "Returns an effectively unlimited stream of pseudorandom long values, each conforming to the given origin (inclusive) and bound (exclusive).",
              "Parameters": "randomNumberOrigin, randomNumberBound",
              "Returns": "a stream of pseudorandom long values, each with the given origin (inclusive) and bound (exclusive)",
              "Throws": "IllegalArgumentException - if randomNumberOrigin is greater than or equal to randomNumberBound",
              "Secure_use": "Ensure that randomNumberOrigin is less than randomNumberBound to avoid IllegalArgumentException.",
              "Insecure_use": "Providing a randomNumberOrigin that is greater than or equal to randomNumberBound will cause an IllegalArgumentException."
            },
            {
              "Function_name": "nextLong (long origin, long bound)",
              "definition": "Generates a random long value within the specified range [origin, bound).",
              "Parameters": "origin: the inclusive lower bound of the random value, bound: the exclusive upper bound of the random value",
              "Returns": "A random long value greater than or equal to the origin and less than the bound.",
              "Throws": "none",
              "Secure_use": "Ensure that the bound is greater than the origin to avoid infinite loops.",
              "Insecure_use": "Using a bound less than or equal to the origin may result in an infinite loop."
            },
            {
              "Function_name": "longs (long randomNumberOrigin, long randomNumberBound)",
              "definition": "This method is implemented to be equivalent to longs(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound).",
              "Parameters": "randomNumberOrigin - the origin (inclusive) of each random value, randomNumberBound - the bound (exclusive) of each random value",
              "Returns": "a stream of pseudorandom long values, each with the given origin (inclusive) and bound (exclusive)",
              "Throws": "IllegalArgumentException - if randomNumberOrigin is greater than or equal to randomNumberBound",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "doubles (long streamSize)",
              "definition": "Returns a stream producing the given streamSize number of pseudorandom double values, each between zero (inclusive) and one (exclusive).",
              "Parameters": "streamSize - the number of values to generate",
              "Returns": "a stream of double values",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "doubles(long streamSize, double randomNumberOrigin, double randomNumberBound)",
              "definition": "Returns a stream producing the given streamSize number of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive).",
              "Parameters": "long streamSize, double randomNumberOrigin, double randomNumberBound",
              "Returns": "a stream of pseudorandom double values",
              "Throws": "IllegalArgumentException - if streamSize is less than zero",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "nextDouble",
              "definition": "Generates a pseudorandom double value between the specified origin (inclusive) and bound (exclusive).",
              "Parameters": "double origin - the inclusive lower bound of the random value, double bound - the exclusive upper bound of the random value",
              "Returns": "A pseudorandom double value within the specified range.",
              "Throws": "none",
              "Secure_use": "Ensure that the origin is less than the bound to avoid infinite loops.",
              "Insecure_use": "Using an origin greater than or equal to the bound may result in incorrect results or infinite loops."
            }
        ]        
    },
    {
        "CLASS_name": "MessageDigest",
        "Description": "This MessageDigest class provides applications the functionality of a message digest algorithm, such as SHA-1 or SHA-256. Message digests are secure one-way hash functions that take arbitrary-sized data and output a fixed-length hash value.\nA MessageDigest object starts out initialized. The data is processed through it using the update methods. At any point reset can be called to reset the digest. Once all the data to be updated has been updated, one of the digest methods should be called to complete the hash computation.",
        "API_funtions": [
            {
              "Function_name": "getInstance(String algorithm)",
              "definition": "Returns a MessageDigest object that implements the specified digest algorithm.",
              "Parameters": "String algorithm",
              "Returns": "MessageDigest object",
              "Throws": "NoSuchAlgorithmException if no Provider supports a MessageDigestSpi implementation for the specified algorithm.",
              "Secure_use": "Use a strong algorithm like SHA-256 for secure hashing.",
              "Insecure_use": "Avoid using weak algorithms like MD5 or SHA-1."
            },
            {
              "Function_name": "update(byte[] input)",
              "definition": "Updates the digest using the specified array of bytes.",
              "Parameters": "byte[] input",
              "Returns": "void",
              "Throws": "none",
              "Secure_use": "Ensure all data to be hashed is input before calling digest.",
              "Insecure_use": "none"
            },
            {
              "Function_name": "reset",
              "definition": "Resets the digest for further use.",
              "Parameters": "none",
              "Returns": "void",
              "Throws": "none",
              "Secure_use": "Use reset to clear the state before reusing the MessageDigest object.",
              "Insecure_use": "none"
            },
            {
              "Function_name": "clone",
              "definition": "Creates and returns a copy of this object.",
              "Parameters": "none",
              "Returns": "A clone of this instance.",
              "Throws": "CloneNotSupportedException - if the object's class does not support the Cloneable interface.",
              "Secure_use": "Use clone to create a snapshot of the current state for safe manipulation.",
              "Insecure_use": "Assuming clone is supported without checking for CloneNotSupportedException."
            },
            {
              "Function_name": "digest",
              "definition": "Completes the hash computation by performing final operations such as padding. The digest is reset after this call is made.",
              "Parameters": "none",
              "Returns": "The array of bytes for the resulting hash value.",
              "Throws": "none",
              "Secure_use": "Ensure the MessageDigest is properly initialized before calling digest.",
              "Insecure_use": "Calling digest multiple times on the same MessageDigest instance without reinitialization."
            },
            {
              "Function_name": "update",
              "definition": "Updates the digest using the specified byte array.",
              "Parameters": "byte[] input - the array of bytes to use for the update.",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "Use update to process data incrementally, ensuring all data is included before calling digest.",
              "Insecure_use": "Failing to update with all necessary data before calling digest."
            },
            {
              "Function_name": "getDigestLength",
              "definition": "Returns the length of the digest in bytes, or 0 if this operation is not supported by the provider and the implementation is not cloneable.",
              "Parameters": "none",
              "Returns": "int",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getInstance (String algorithm)",
              "definition": "Returns a MessageDigest object that implements the specified digest algorithm.",
              "Parameters": "String algorithm",
              "Returns": "MessageDigest",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getInstance (String algorithm, String provider)",
              "definition": "Returns a MessageDigest object that implements the specified digest algorithm.",
              "Parameters": "String algorithm, String provider",
              "Returns": "MessageDigest",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getProvider",
              "definition": "Returns the provider of this message digest object.",
              "Parameters": "none",
              "Returns": "Provider",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "isEqual (byte[] digesta, byte[] digestb)",
              "definition": "Compares two digests for equality.",
              "Parameters": "byte[] digesta, byte[] digestb",
              "Returns": "boolean",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            }
        ]  
    },
    {
        "CLASS_name": "Mac",
        "Description": "The Mac class provides functionality for Message Authentication Codes (MAC) to ensure data integrity and authenticity. Common algorithms include HmacSHA256, HmacSHA512, and AESCMAC.",
        "API_funtions": [
            {
              "Function_name": "none",
              "definition": "This class provides the functionality of a 'Message Authentication Code' (MAC) algorithm. A MAC provides a way to check the integrity of information transmitted over or stored in an unreliable medium, based on a secret key.",
              "Parameters": "none",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "A MAC mechanism that is based on cryptographic hash functions is referred to as HMAC. HMAC can be used with any cryptographic hash function, e.g., SHA256 or SHA384, in combination with a secret shared key.",
              "Insecure_use": "none"
            },
            {
              "Function_name": "clone",
              "definition": "Returns a clone if the provider implementation is cloneable.",
              "Parameters": "none",
              "Returns": "Object",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "doFinal (byte[] input)",
              "definition": "Processes the given array of bytes and finishes the MAC operation.",
              "Parameters": "byte[] input",
              "Returns": "byte[]",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "doFinal (byte[] input, int offset)",
              "definition": "Finishes the MAC operation.",
              "Parameters": "byte[] output, int outOffset",
              "Returns": "void",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getAlgorithm",
              "definition": "Returns the algorithm name of this Mac object.",
              "Parameters": "none",
              "Returns": "String",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getMacLength",
              "definition": "Returns the length of the MAC in bytes.",
              "Parameters": "none",
              "Returns": "int",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getProvider",
              "definition": "Returns the provider of this Mac object.",
              "Parameters": "none",
              "Returns": "Provider",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "init (Key key)",
              "definition": "Initializes this Mac object with the given key.",
              "Parameters": "Key key",
              "Returns": "void",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "init (Key key, AlgorithmParameterSpec params)",
              "definition": "Initializes this Mac object with the given key and algorithm parameters.",
              "Parameters": "Key key, AlgorithmParameterSpec params",
              "Returns": "void",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "update (byte input)",
              "definition": "Processes the given byte.",
              "Parameters": "byte input",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getAlgorithm",
              "definition": "Returns the algorithm name of this Mac object.",
              "Parameters": "none",
              "Returns": "the algorithm name of this Mac object.",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getInstance(String algorithm)",
              "definition": "Returns a Mac object that implements the specified MAC algorithm.",
              "Parameters": "algorithm - the standard name of the requested MAC algorithm.",
              "Returns": "the new Mac object.",
              "Throws": "NoSuchAlgorithmException",
              "Secure_use": "Secure API use\nMac mac = Mac.getInstance( \"HmacSHA256\" );\nSecure algorithm:\nHmacSHA256, HmacSHA512, AESCMAC.",
              "Insecure_use": "Using a risky Message Authentication Code (MAC) API for data integrity and authenticity verification.\nMac mac = Mac.getInstance( \"HmacSHA1\" );\nInsecure algorithm:HmacMD5,HmacSHA1"
            },
            {
              "Function_name": "getInstance(String algorithm,Provider provider)",
              "definition": "Returns a Mac object that implements the specified MAC algorithm. A new Mac object encapsulating the MacSpi implementation from the specified Provider object is returned.",
              "Parameters": "algorithm - the standard name of the requested MAC algorithm. provider - the provider.",
              "Returns": "the new Mac object.",
              "Throws": "NoSuchAlgorithmException - if a MacSpi implementation for the specified algorithm is not available from the specified Provider object. IllegalArgumentException - if the provider is null.",
              "Secure_use": "Secure API use\nMac mac = Mac.getInstance( \"HmacSHA256\" );\nSecure algorithm:\nHmacSHA256, HmacSHA512, AESCMAC.",
              "Insecure_use": "Using a risky Message Authentication Code (MAC) API for data integrity and authenticity verification.\nMac mac = Mac.getInstance( \"HmacSHA1\" );\nInsecure algorithm:HmacMD5,HmacSHA1"
            },
            {
              "Function_name": "getProvider",
              "definition": "Returns the provider of this Mac object.",
              "Parameters": "none",
              "Returns": "the provider of this Mac object.",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getMacLength",
              "definition": "Returns the length of the MAC in bytes.",
              "Parameters": "none",
              "Returns": "the MAC length in bytes.",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "init (Key key)",
              "definition": "Initializes this Mac object with the given key.",
              "Parameters": "key - the key.",
              "Returns": "none",
              "Throws": "InvalidKeyException - if the given key is inappropriate for initializing this MAC.",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "reset",
              "definition": "Resets this Mac object to its initial state.",
              "Parameters": "none",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "update",
              "definition": "Processes the given byte.",
              "Parameters": "input - the byte.",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "update (byte[] input)",
              "definition": "Processes the given array of bytes.",
              "Parameters": "input - the byte array.",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "update (ByteBuffer input)",
              "definition": "Processes input.remaining() bytes in the ByteBuffer input.",
              "Parameters": "input - the ByteBuffer to process.",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            }
        ]        
    },
    {
        "CLASS_name": "HttpsURLConnection",
        "Description": "API Description: HttpsURLConnection extends HttpURLConnection to support HTTPS-specific features. It adheres to the HTTPS protocol (see W3C and RFC 2818). This class utilizes HostnameVerifier and SSLSocketFactory, with default implementations for both.",
        "API_funtions": [
            {
              "Function_name": "getCipherSuite",
              "definition": "Returns the cipher suite in use on this connection.",
              "Parameters": "none",
              "Returns": "String",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getDefaultHostnameVerifier",
              "definition": "Gets the default HostnameVerifier that is inherited by new instances of this class.",
              "Parameters": "none",
              "Returns": "HostnameVerifier",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getDefaultSSLSocketFactory",
              "definition": "Gets the default static SSLSocketFactory that is inherited by new instances of this class.",
              "Parameters": "none",
              "Returns": "SSLSocketFactory",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "setDefaultHostnameVerifier (HostnameVerifier v)",
              "definition": "Sets the default HostnameVerifier inherited by a new instance of this class.",
              "Parameters": "HostnameVerifier v",
              "Returns": "void",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "setDefaultSSLSocketFactory (SSLSocketFactory sf)",
              "definition": "Sets the default SSLSocketFactory inherited by new instances of this class.",
              "Parameters": "SSLSocketFactory sf",
              "Returns": "void",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "setHostnameVerifier (HostnameVerifier v)",
              "definition": "Sets the HostnameVerifier for this instance.",
              "Parameters": "HostnameVerifier v",
              "Returns": "void",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "setSSLSocketFactory",
              "definition": "Sets the SSLSocketFactory to be used when this instance creates sockets for secure https URL connections.",
              "Parameters": "SSLSocketFactory sf",
              "Returns": "none",
              "Throws": "none",
              "Secure_use": "Use a properly configured and trusted SSLSocketFactory.",
              "Insecure_use": "Using an SSLSocketFactory that does not properly validate SSL certificates."
            },
            {
              "Function_name": "getCipherSuite",
              "definition": "Returns the cipher suite in use on this connection.",
              "Parameters": "none",
              "Returns": "the cipher suite",
              "Throws": "IllegalStateException - if this method is called before the connection has been established.",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getLocalCertificates",
              "definition": "Returns the certificate(s) that were sent to the server during handshaking.",
              "Parameters": "none",
              "Returns": "an ordered array of certificates, with the client's own certificate first followed by any certificate authorities. If no certificates were sent, then null is returned.",
              "Throws": "IllegalStateException - if this method is called before the connection has been established.",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getServerCertificates",
              "definition": "Returns the server's certificate chain which was established as part of defining the session.",
              "Parameters": "none",
              "Returns": "an ordered array of server certificates, with the peer's own certificate first followed by any certificate authorities.",
              "Throws": [
                "SSLPeerUnverifiedException - if the peer is not verified.",
                "IllegalStateException - if this method is called before the connection has been established."
              ],
              "Secure_use": "Use this method only when using certificate-based cipher suites.",
              "Insecure_use": "Using this method with non-certificate-based cipher suites, such as Kerberos, will throw an SSLPeerUnverifiedException."
            },
            {
              "Function_name": "getPeerPrincipal",
              "definition": "Returns the server's principal which was established as part of defining the session.",
              "Parameters": "none",
              "Returns": "the server's principal. Returns an X500Principal of the end-entity certificate for X509-based cipher suites, and KerberosPrincipal for Kerberos cipher suites.",
              "Throws": "SSLPeerUnverifiedException - if the peer is not verified.",
              "Secure_use": "Subclasses should override this method to ensure proper behavior.",
              "Insecure_use": "If not overridden, it will default to returning the X500Principal of the server's end-entity certificate for certificate-based cipher suites, or throw an SSLPeerUnverifiedException for non-certificate-based cipher suites, such as Kerberos."
            },
            {
              "Function_name": "getLocalPrincipal",
              "definition": "Returns the principal that was sent to the server during handshaking.",
              "Parameters": "none",
              "Returns": "the principal sent to the server. Returns an X500Principal of the end-entity certificate for X509-based cipher suites, and KerberosPrincipal for Kerberos cipher suites. If no principal was sent, then null is returned.",
              "Throws": "IllegalStateException - if this method is called before the connection has been established.",
              "Secure_use": "Subclasses should override this method to ensure the correct principal is returned.",
              "Insecure_use": "If not overridden, it defaults to returning the X500Principal of the end-entity certificate or null for non-certificate based ciphersuites."
            },
            {
              "Function_name": "getDefaultHostnameVerifier",
              "definition": "Gets the default HostnameVerifier that is inherited by new instances of this class.",
              "Parameters": "none",
              "Returns": "the default host name verifier",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "setHostnameVerifier (HostnameVerifier v)",
              "definition": "Sets the HostnameVerifier for this instance. New instances of this class inherit the default static hostname verifier set by setDefaultHostnameVerifier. Calls to this method replace this object's HostnameVerifier.",
              "Parameters": "v - the host name verifier",
              "Returns": "none",
              "Throws": "IllegalArgumentException - if the HostnameVerifier parameter is null. SecurityException - if a security manager exists and its checkPermission method does not allow SSLPermission('setHostnameVerifier')",
              "Secure_use": "none",
              "Insecure_use": "none"
            }
        ]
    },
    {
        "CLASS_name": "SocketFactory",
        "Description": "API Description:\nThe socket factory class creates and manages socket instances. It supports subclassing to extend socket functionality, providing a flexible framework for socket-level features. It enables customizable socket creation with various configurations, such as timeouts and security.",
        "API_funtions": [            
        {
          "Function_name": "createSocket(String host,int port)",
          "definition": "Creates a socket and connects it to the specified remote host at the specified remote port. This socket is configured using the socket options established for this factory.",
          "Parameters": "host - the server host name with which to connect, or null for the loopback address. port - the server port",
          "Returns": "the Socket",
          "Throws": "IOException - if an I/O error occurs when creating the socket SecurityException - if a security manager exists and its checkConnect method doesn't allow the operation. UnknownHostException - if the host is not known IllegalArgumentException - if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive.",
          "Secure_use": "none",
          "Insecure_use": "none"
        },
        {
          "Function_name": "createSocket(String host,int port,InetAddress localHost,int localPort)",
          "definition": "Creates a socket and connects it to the specified remote host on the specified remote port. The socket will also be bound to the local address and port supplied. This socket is configured using the socket options established for this factory.",
          "Parameters": "host - the server host name with which to connect, or null for the loopback address. port - the server port,localHost - the local address the socket is bound to localPort - the local port the socket is bound to",
          "Returns": "none",
          "Throws": "IOException - if an I/O error occurs when creating the socket SecurityException - if a security manager exists and its checkConnect method doesn't allow the operation. UnknownHostException - if the host is not known IllegalArgumentException - if the port parameter or localPort parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive.",
          "Secure_use": "none",
          "Insecure_use": "none"
        }
      ]
    },
    {
        "CLASS_name": "IvParameterSpec",
        "Description": "API Description:\nThe IvParameterSpec class is used to specify an initialization vector (IV) for encryption in algorithms that use modes such as CBC (Cipher Block Chaining). An IV is crucial for ensuring unique ciphertexts for the same plaintext in encryption.",
        "API_funtions":[
            {
              "Function_name": "IvParameterSpec(byte[] iv)",
              "definition": "Creates an IvParameterSpec object using the bytes in iv as the IV.",
              "Parameters": "iv - the buffer with the IV. The contents of the buffer are copied to protect against subsequent modification.",
              "Returns": "none",
              "Throws": "NullPointerException - if iv is null",
              "Secure_use": "Randomly initialize IV to ensure security, using the securerandom class",
              "Insecure_use": "Static/constant initialization vector in encryption operations  introduces vulnerabilities for CBC mode of operation.\nprivate static final byte[] iv = new byte[]\n    { ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00,\n        ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00,\n        ( byte ) 0x00, ( byte ) 0x00 };\nAlgorithmParameterSpec paramSpec = new IvParameterSpec( iv )"
            },
            {
              "Function_name": "getIV",
              "definition": "Returns the initialization vector (IV).",
              "Parameters": "none",
              "Returns": "byte[] - the initialization vector",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "IvParameterSpec(byte[] iv,int offset,int len)",
              "definition": "Creates an IvParameterSpec object using the first len bytes in iv, beginning at offset inclusive, as the IV. The bytes that constitute the IV are those between iv[offset] and iv[offset+len-1] inclusive.",
              "Parameters": "iv - the buffer with the IV. The first len bytes of the buffer beginning at offset inclusive are copied to protect against subsequent modification. offset - the offset in iv where the IV starts. len - the number of IV bytes.",
              "Returns": "none",
              "Throws": "IllegalArgumentException - if iv is null or (iv.length - offset < len). ArrayIndexOutOfBoundsException - is thrown if offset or len index bytes outside the iv.",
              "Secure_use": "Randomly initialize IV to ensure security, using the securerandom class"
            }
      ]      
    },
    {
        "CLASS_name": "ServerSocketFactory",
        "Description": "API Description: This class is responsible for creating server sockets. It serves as a framework for adding public socket-level functionality and can be subclassed for custom types of server sockets. It acts as the server-side counterpart of a socket factory, capturing different policies for socket creation.",
        "API_funtions": [
            {
              "Function_name": "createServerSocket",
              "definition": "Creates a server socket. This method must be implemented by subclasses to create a server socket with the specified parameters.",
              "Parameters": "none",
              "Returns": "ServerSocket",
              "Throws": "IOException",
              "Secure_use": "Use SSLServerSocketFactory for secure server socket creation.",
              "Insecure_use": "Direct use of ServerSocketFactory without SSL may result in insecure connections."
            },
            {
              "Function_name": "createServerSocket (int port)",
              "definition": "Returns a server socket bound to the specified port.",
              "Parameters": "int port",
              "Returns": "ServerSocket",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "createServerSocket (int port, int backlog)",
              "definition": "Returns a server socket bound to the specified port, and uses the specified connection backlog.",
              "Parameters": "int port, int backlog",
              "Returns": "ServerSocket",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "createServerSocket (int port, int backlog, InetAddress ifAddress)",
              "definition": "Returns a server socket bound to the specified port, with a specified listen backlog and local IP.",
              "Parameters": "int port, int backlog, InetAddress ifAddress",
              "Returns": "ServerSocket",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "getDefault",
              "definition": "Returns a copy of the environment's default socket factory.",
              "Parameters": "none",
              "Returns": "ServerSocketFactory",
              "Throws": "none",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "createServerSocket ()",
              "definition": "Returns an unbound server socket. The socket is configured with the socket options (such as accept timeout) given to this factory.",
              "Parameters": "none",
              "Returns": "the unbound socket",
              "Throws": "IOException - if the socket cannot be created",
              "Secure_use": "none",
              "Insecure_use": "none"
            },
            {
              "Function_name": "createServerSocket (int port)",
              "definition": "Returns a server socket bound to the specified port. The socket is configured with the socket options (such as accept timeout) given to this factory.",
              "Parameters": "port - the port to listen to",
              "Returns": "the ServerSocket",
              "Throws": "IOException - for networking errors, SecurityException - if a security manager exists and its checkListen method doesn't allow the operation, IllegalArgumentException - if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive.",
              "Secure_use": "If there is a security manager, its checkListen method is called with the port argument as its argument to ensure the operation is allowed.",
              "Insecure_use": "none"
            },
            {
              "Function_name": "createServerSocket (int port, int backlog)",
              "definition": "Returns a server socket bound to the specified port, and uses the specified connection backlog. The socket is configured with the socket options (such as accept timeout) given to this factory.",
              "Parameters": "port - the port to listen to, backlog - the connection backlog",
              "Returns": "the ServerSocket",
              "Throws": "IOException - for networking errors, SecurityException - if a security manager exists and its checkListen method doesn't allow the operation, IllegalArgumentException - if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive.",
              "Secure_use": "If there is a security manager, its checkListen method is called with the port argument as its argument to ensure the operation is allowed.",
              "Insecure_use": "none"
            },
            {
              "Function_name": "createServerSocket (int port, int backlog, InetAddress ifAddress)",
              "definition": "An abstract method to create a ServerSocket with specified port, backlog, and network interface address.",
              "Parameters": "port - the port to listen to; backlog - how many connections are queued; ifAddress - the network interface address to bind to.",
              "Returns": "the ServerSocket",
              "Throws": "IOException - for networking errors; SecurityException - if a security manager exists and its checkListen method doesn't allow the operation; IllegalArgumentException - if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive.",
              "Secure_use": "Ensure that the port is within the valid range and that the backlog is a positive value. Check for SecurityException if a security manager is present.",
              "Insecure_use": "Passing a port value outside the range of 0 to 65535 or a non-positive backlog value. Not handling SecurityException when a security manager is present."
            }
        ]        
    },
    {
        "CLASS_name": "SecretKeySpec",
        "Description": "API Description:\nThe CipherAlgo API is used to encrypt and decrypt data using specified cryptographic algorithms. The SecretKeySpec class is used to generate secret keys from byte arrays for use in encryption algorithms like AES and DES.",
        "API_funtions": [
          {
            "Function_name": "equals (Object obj)",
            "definition": "Tests for equality between the specified object and this object.",
            "Parameters": "Object obj",
            "Returns": "boolean",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "getAlgorithm",
            "definition": "Returns the name of the algorithm associated with this secret key.",
            "Parameters": "none",
            "Returns": "String",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "getEncoded",
            "definition": "Returns the key material of this secret key.",
            "Parameters": "none",
            "Returns": "byte[]",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "hashCode",
            "definition": "Calculates a hash code value for the object.",
            "Parameters": "none",
            "Returns": "int",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "public SecretKeySpec(byte[] key,String algorithm)",
            "definition": "Constructs a secret key from the given byte array.",
            "Parameters": "key - the key material of the secret key. The contents of the array are copied to protect against subsequent modification. algorithm - the name of the secret-key algorithm to be associated with the given key material.",
            "Returns": "none",
            "Throws": "IllegalArgumentException - if algorithm is null or key is null or empty.",
            "Secure_use": "Use an algorithm-specific key specification class for checks, e.g., for AES algorithm.",
            "Insecure_use": "This constructor does not check if the given bytes indeed specify a secret key of the specified algorithm."
          },
          {
            "Function_name": "public SecretKeySpec(byte[] key,int offset,int len,String algorithm)",
            "definition": "Constructs a secret key from the given byte array, using the first len bytes of key, starting at offset inclusive.",
            "Parameters": "key - the key material of the secret key. The first len bytes of the array beginning at offset inclusive are copied to protect against subsequent modification. offset - the offset in key where the key material starts. len - the length of the key material. algorithm - the name of the secret-key algorithm to be associated with the given key material.",
            "Returns": "none",
            "Throws": "IllegalArgumentException - if algorithm is null or key is null, empty, or too short, i.e. key.length-offset<len. ArrayIndexOutOfBoundsException - is thrown if offset or len index bytes outside the key.",
            "Secure_use": "Use an algorithm-specific key specification class (e.g., AES) to ensure the key meets the requirements of the specified algorithm.",
            "Insecure_use": "Using this constructor without checking if the key meets the algorithm-specific requirements, such as key length or weak key checks."
          },
          {
            "Function_name": "getAlgorithm",
            "definition": "Returns the name of the algorithm associated with this secret key.",
            "Parameters": "none",
            "Returns": "String - the name of the algorithm.",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "getEncoded",
            "definition": "Returns the key material of this secret key.",
            "Parameters": "none",
            "Returns": "the key material. Returns a new array each time this method is called.",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "hashCode",
            "definition": "Calculates a hash code value for the object. Objects that are equal will also have the same hashcode.",
            "Parameters": "none",
            "Returns": "a hash code value for this object.",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "equals",
            "definition": "Tests for equality between the specified object and this object. Two SecretKeySpec objects are considered equal if they are both SecretKey instances which have the same case-insensitive algorithm name and key encoding.",
            "Parameters": "obj - the object to test for equality with this object.",
            "Returns": "true if the objects are considered equal, false if obj is null or otherwise.",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          }
      ]      
    },
    {
        "CLASS_name": "HostnameVerifier",
        "Description": "API Description: This interface is for hostname verification during SSL handshakes. When the URL's hostname doesn't match the server's identification hostname, the verification process calls this interface to decide whether to allow the connection.",
        "API_funtions": [
          {
            "Function_name": "verify",
            "definition": "This method determines if a connection should be allowed when the URL's hostname and the server's identification hostname mismatch during SSL handshaking.",
            "Parameters": "String hostname, SSLSession session",
            "Returns": "boolean",
            "Throws": "none",
            "Secure_use": "Implement custom logic to validate the server's identity based on the hostname and SSL session information.",
            "Insecure_use": "Returning true without proper validation, which would allow connections to potentially malicious servers."
          }
      ]      
    },
    {
        "CLASS_name": "KeyManagerFactory",
        "Description": "API Description:\nThe javax.net.ssl.KeyManagerFactory class is a provider-based service engine that creates KeyManager objects. The SunJSSE provider offers an implementation for X.509 key managers, but additional factories for custom key managers can also be implemented and configured.",
        "API_funtions": [
          {
            "Function_name": "KeyManagerFactory (KeyManagerFactorySpi factorySpi, Provider provider, String algorithm)",
            "definition": "This class acts as a factory for key managers based on a source of key material. Each key manager manages a specific type of key material for use by secure sockets. The key material is based on a KeyStore and/or provider specific sources.",
            "Parameters": "KeyManagerFactorySpi factorySpi, Provider provider, String algorithm",
            "Returns": "none",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "getAlgorithm",
            "definition": "Returns the algorithm name of this KeyManagerFactory object.",
            "Parameters": "none",
            "Returns": "String",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "getDefaultAlgorithm",
            "definition": "Obtains the default KeyManagerFactory algorithm name.",
            "Parameters": "none",
            "Returns": "String",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "getInstance (String algorithm)",
            "definition": "Returns a KeyManagerFactory object that acts as a factory for key managers.",
            "Parameters": "String algorithm",
            "Returns": "KeyManagerFactory",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "getInstance (String algorithm, Provider provider)",
            "definition": "Returns a KeyManagerFactory object that acts as a factory for key managers.",
            "Parameters": "String algorithm, Provider provider",
            "Returns": "KeyManagerFactory",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "getKeyManagers",
            "definition": "Returns one key manager for each type of key material.",
            "Parameters": "none",
            "Returns": "KeyManager[]",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "getProvider",
            "definition": "Returns the provider of this KeyManagerFactory object.",
            "Parameters": "none",
            "Returns": "Provider",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "init (KeyStore ks, char[] password)",
            "definition": "Initializes this factory with a source of key material.",
            "Parameters": "KeyStore ks, char[] password",
            "Returns": "void",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "KeyManagerFactory (ManagerFactoryParameters spec)",
            "definition": "Creates a KeyManagerFactory object.",
            "Parameters": "factorySpi - the delegate, provider - the provider, algorithm - the algorithm",
            "Returns": "none",
            "Throws": "none",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "getInstance (String algorithm)",
            "definition": "Returns a KeyManagerFactory object that acts as a factory for key managers. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new KeyManagerFactory object encapsulating the KeyManagerFactorySpi implementation from the first Provider that supports the specified algorithm is returned.",
            "Parameters": "algorithm - the standard name of the requested algorithm.",
            "Returns": "a KeyManagerFactory object that acts as a factory for key managers.",
            "Throws": "NoSuchAlgorithmException",
            "Secure_use": "none",
            "Insecure_use": "none"
          },
          {
            "Function_name": "getInstance (String algorithm, String provider)",
            "definition": "Returns a KeyManagerFactory object that acts as a factory for key managers. A new KeyManagerFactory object encapsulating the KeyManagerFactorySpi implementation from the specified provider is returned.",
            "Parameters": "algorithm - the standard name of the requested algorithm. provider - the name of the provider.",
            "Returns": "the new KeyManagerFactory object.",
            "Throws": "NoSuchAlgorithmException - if no Provider supports a KeyManagerFactorySpi implementation for the specified algorithm. NoSuchProviderException - if the specified provider is not registered in the security provider list.",
            "Secure_use": "Ensure that the specified provider is registered in the security provider list using Security.getProviders() method.",
            "Insecure_use": "Using an unregistered provider or a null algorithm may result in exceptions."
          },
          {
            "Function_name": "init (KeyStore ks, char[] password)",
            "definition": "Initializes this factory with a source of key material.",
            "Parameters": "KeyStore ks, char[] password",
            "Returns": "none",
            "Throws": "KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException",
            "Secure_use": "The provider typically uses a KeyStore for obtaining key material for use during secure socket negotiations.",
            "Insecure_use": "none"
          },
          {
            "Function_name": "init (ManagerFactoryParameters spec)",
            "definition": "Initializes this factory with a source of provider-specific key material.",
            "Parameters": "spec - an implementation of a provider-specific parameter specification",
            "Returns": "none",
            "Throws": "InvalidAlgorithmParameterException - if an error is encountered"
          },
          {
            "Function_name": "init (KeyStore ks, char[] password)",
            "definition": "For more flexible initialization, please see init(ManagerFactoryParameters).",
            "Parameters": "ks - the key store or null, password - the password for recovering keys in the KeyStore",
            "Returns": "none",
            "Throws": "KeyStoreException - if this operation fails, NoSuchAlgorithmException - if the specified algorithm is not available from the specified provider, UnrecoverableKeyException - if the key cannot be recovered (e.g. the given password is wrong)"
          },
          {
            "Function_name": "getKeyManagers",
            "definition": "Returns one key manager for each type of key material.",
            "Parameters": "none",
            "Returns": "the key managers",
            "Throws": "IllegalStateException - if the KeyManagerFactory is not initialized",
            "Secure_use": "none",
            "Insecure_use": "none"
          }
      ]      
    },
    {
      "CLASS_name": "X509EncodedKeySpec",
      "Description": "This class represents the ASN.1 encoding of a public key, encoded according to the ASN.1 type SubjectPublicKeyInfo",
      "API_funtions": [
        {
          "Function_name": "X509EncodedKeySpec (byte[] encodedKey)",
          "definition": "Creates a new X509EncodedKeySpec with the given encoded key.",
          "Parameters": "byte[] encodedKey",
          "Returns": "none",
          "Throws": "none",
          "Secure_use": "Ensure the encoded key is properly validated and from a trusted source.",
          "Insecure_use": "Using encoded keys from untrusted sources without validation."
        },
        {
          "Function_name": "getEncoded ()",
          "definition": "Returns the key bytes, encoded according to the X.509 standard.",
          "Parameters": "none",
          "Returns": "byte[]",
          "Throws": "none",
          "Secure_use": "Use the encoded key for secure cryptographic operations.",
          "Insecure_use": "Exposing the encoded key to unauthorized entities."
        },
        {
          "Function_name": "getFormat",
          "definition": "Returns the name of the encoding format associated with this key specification.",
          "Parameters": "none",
          "Returns": "String",
          "Throws": "none",
          "Secure_use": "Use the format information to handle key specifications appropriately.",
          "Insecure_use": "Ignoring format information leading to improper handling of keys."
        }
  ]
  },
  {
    "CLASS_name": "TrustManager",
    "Description": "TrustManagers are responsible for managing the trust material that is used when making trust decisions, and for deciding whether credentials presented by a peer should be accepted.",
    "API_funtions": [
      {
          "Function_name": "TrustManagerFactory (TrustManagerFactorySpi factorySpi, Provider provider, String algorithm)",
          "definition": "This class acts as a factory for trust managers based on a source of trust material. Each trust manager manages a specific type of trust material for use by secure sockets. The trust material is based on a KeyStore and/or provider specific sources.",
          "Parameters": "TrustManagerFactorySpi factorySpi, Provider provider, String algorithm",
          "Returns": "none",
          "Throws": "none",
          "Secure_use": "none",
          "Insecure_use": "none"
      },
      {
          "Function_name": "getDefaultAlgorithm",
          "definition": "Obtains the default TrustManagerFactory algorithm name.",
          "Parameters": "none",
          "Returns": "String",
          "Throws": "none",
          "Secure_use": "none",
          "Insecure_use": "none"
      },
      {
          "Function_name": "getInstance (algorithm)",
          "definition": "Returns a TrustManagerFactory object that acts as a factory for trust managers.",
          "Parameters": "String algorithm",
          "Returns": "TrustManagerFactory",
          "Throws": "none",
          "Secure_use": "none",
          "Insecure_use": "none"
      },
      {
          "Function_name": "getInstance (String algorithm, Provider provider)",
          "definition": "Returns a TrustManagerFactory object that acts as a factory for trust managers.",
          "Parameters": "String algorithm, Provider provider",
          "Returns": "TrustManagerFactory",
          "Throws": "none",
          "Secure_use": "none",
          "Insecure_use": "none"
      },
      {
          "Function_name": "getTrustManagers",
          "definition": "Returns one trust manager for each type of trust material.",
          "Parameters": "none",
          "Returns": "TrustManager[]",
          "Throws": "none",
          "Secure_use": "none",
          "Insecure_use": "none"
      },
      {
          "Function_name": "init (KeyStore ks)",
          "definition": "Initializes this factory with a source of certificate authorities and related trust material.",
          "Parameters": "KeyStore ks",
          "Returns": "void",
          "Throws": "none",
          "Secure_use": "none",
          "Insecure_use": "none"
      },
      {
          "Function_name": "init (ManagerFactoryParameters spec)",
          "definition": "Initializes this factory with a source of certificate authorities and related trust material.",
          "Parameters": "ManagerFactoryParameters spec",
          "Returns": "void",
          "Throws": "none",
          "Secure_use": "none",
          "Insecure_use": "none"
      },
      {
          "Function_name": "TrustManagerFactory (TrustManagerFactorySpi factorySpi, Provider provider, String algorithm)",
          "definition": "Creates a TrustManagerFactory object.",
          "Parameters": "factorySpi - the delegate, provider - the provider, algorithm - the algorithm",
          "Returns": "none",
          "Throws": "none",
          "Secure_use": "none",
          "Insecure_use": "none"
      },
      {
          "Function_name": "getDefaultAlgorithm",
          "definition": "Obtains the default TrustManagerFactory algorithm name.",
          "Parameters": "none",
          "Returns": "The default TrustManager algorithm name.",
          "Throws": "none",
          "Secure_use": "The default TrustManager can be changed at runtime by setting the value of the ssl.TrustManagerFactory.algorithm security property to the desired algorithm name.",
          "Insecure_use": "none"
      },
      {
          "Function_name": "getAlgorithm",
          "definition": "Returns the algorithm name of this TrustManagerFactory object. This is the same name that was specified in one of the getInstance calls that created this TrustManagerFactory object.",
          "Parameters": "none",
          "Returns": "the algorithm name of this TrustManagerFactory object",
          "Throws": "none",
          "Secure_use": "none",
          "Insecure_use": "none"
      },
      {
          "Function_name": "getInstance",
          "definition": "Returns a TrustManagerFactory object that acts as a factory for trust managers. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new TrustManagerFactory object encapsulating the TrustManagerFactorySpi implementation from the first Provider that supports the specified algorithm is returned.",
          "Parameters": "algorithm - the standard name of the requested trust management algorithm.",
          "Returns": "a TrustManagerFactory object",
          "Throws": "NoSuchAlgorithmException",
          "Secure_use": "none",
          "Insecure_use": "none"
      },
      {
          "Function_name": "TrustManagerFactory.getInstance (String algorithm)",
          "definition": "Returns a TrustManagerFactory object that acts as a factory for trust managers.",
          "Parameters": "algorithm - the standard name of the requested trust management algorithm. provider - the name of the provider.",
          "Returns": "the new TrustManagerFactory object.",
          "Throws": "NoSuchAlgorithmException - if no Provider supports a TrustManagerFactorySpi implementation for the specified algorithm. NoSuchProviderException - if the specified provider is not registered. NullPointerException - if algorithm is null.",
          "Secure_use": "Ensure that the specified provider is registered in the security provider list.",
          "Insecure_use": "Using a null algorithm or an unregistered provider."
      },
      {
          "Function_name": "TrustManagerFactory getInstance (String algorithm, Provider provider)",
          "definition": "Returns a TrustManagerFactory object that acts as a factory for trust managers. A new TrustManagerFactory object encapsulating the TrustManagerFactorySpi implementation from the specified Provider object is returned.",
          "Parameters": "algorithm - the standard name of the requested trust management algorithm. provider - an instance of the provider.",
          "Returns": "the new TrustManagerFactory object",
          "Throws": "NoSuchAlgorithmException - if a TrustManagerFactorySpi implementation for the specified algorithm is not available from the specified provider. NoSuchProviderException - if the specified provider is not registered in the security provider list. IllegalArgumentException - if the provider name is null or empty. NullPointerException - if algorithm is null.",
          "Secure_use": "none",
          "Insecure_use": "none"
      },
      {
          "Function_name": "getProvider",
          "definition": "Returns the provider of this TrustManagerFactory object.",
          "Parameters": "none",
          "Returns": "the provider of this TrustManagerFactory object",
          "Throws": "none",
          "Secure_use": "none",
          "Insecure_use": "none"
      },
      {
          "Function_name": "init (KeyStore ks)",
          "definition": "Initializes this factory with a source of certificate authorities and related trust material.",
          "Parameters": "KeyStore ks",
          "Returns": "none",
          "Throws": "KeyStoreException",
          "Secure_use": "The provider typically uses a KeyStore as a basis for making trust decisions.",
          "Insecure_use": "none"
      },
      {
          "Function_name": "init (ManagerFactoryParameters spec)",
          "definition": "Initializes this factory with a source of provider-specific trust material.",
          "Parameters": "spec - an implementation of a provider-specific parameter specification",
          "Returns": "none",
          "Throws": "InvalidAlgorithmParameterException - if an error is encountered",
          "Secure_use": "none",
          "Insecure_use": "none"
      },
      {
          "Function_name": "getTrustManagers",
          "definition": "Returns one trust manager for each type of trust material.",
          "Parameters": "none",
          "Returns": "the trust managers",
          "Throws": "none",
          "Secure_use": "none",
          "Insecure_use": "none"
      },
      {
          "Function_name": "IllegalStateException",
          "definition": "Thrown to indicate that a method has been invoked at an illegal or inappropriate time.",
          "Parameters": "none",
          "Returns": "none",
          "Throws": "none",
          "Secure_use": "Ensure that the factory is properly initialized before invoking methods that depend on it.",
          "Insecure_use": "Invoking methods on an uninitialized factory, leading to IllegalStateException."
      }
  ]  
  },
  {
  "CLASS_name": "SSLContext",
  "Description": "Instances of this class represent a secure socket protocol implementation which acts as a factory for secure socket factories or SSLEngines. This class is initialized with an optional set of key and trust managers and source of secure random bytes.",
  "API_funtions": [
    {
      "Function_name": "createSSLEngine",
      "definition": "Creates a new SSLEngine using this context.",
      "Parameters": "none",
      "Returns": "SSLEngine",
      "Throws": "none",
      "Secure_use": "none",
      "Insecure_use": "none"
    },
    {
      "Function_name": "getClientSessionContext",
      "definition": "Returns the client session context, which represents the set of SSL sessions available for use during the handshake phase of client-side SSL sockets.",
      "Parameters": "none",
      "Returns": "SSLSessionContext",
      "Throws": "none",
      "Secure_use": "none",
      "Insecure_use": "none"
    },
    {
      "Function_name": "getDefault",
      "definition": "Returns the default SSL context.",
      "Parameters": "none",
      "Returns": "SSLContext",
      "Throws": "none",
      "Secure_use": "none",
      "Insecure_use": "none"
    },
    {
      "Function_name": "getDefaultSSLParameters",
      "definition": "Returns a copy of the SSLParameters indicating the default settings for this SSL context.",
      "Parameters": "none",
      "Returns": "SSLParameters",
      "Throws": "none",
      "Secure_use": "none",
      "Insecure_use": "none"
    },
    {
      "Function_name": "getInstance (String protocol)",
      "definition": "Returns a SSLContext object that implements the specified secure socket protocol.",
      "Parameters": "String protocol",
      "Returns": "SSLContext",
      "Throws": "none",
      "Secure_use": "none",
      "Insecure_use": "none"
    },
    {
      "Function_name": "getSupportedSSLParameters",
      "definition": "Returns a copy of the SSLParameters indicating the supported settings for this SSL context.",
      "Parameters": "none",
      "Returns": "SSLParameters",
      "Throws": "none",
      "Secure_use": "none",
      "Insecure_use": "none"
    },
    {
      "Function_name": "init (KeyManager[] km, TrustManager[] tm, SecureRandom random)",
      "definition": "Initializes this context.",
      "Parameters": "KeyManager[] km, TrustManager[] tm, SecureRandom random",
      "Returns": "void",
      "Throws": "none",
      "Secure_use": "none",
      "Insecure_use": "none"
    },
    {
      "Function_name": "SSLContext (SSLContextSpi contextSpi, Provider provider, String protocol)",
      "definition": "Creates an SSLContext object.",
      "Parameters": "contextSpi - the delegate, provider - the provider, protocol - the protocol",
      "Returns": "none",
      "Throws": "none",
      "Secure_use": "none",
      "Insecure_use": "none"
    },
    {
      "Function_name": "setDefault (SSLContext context)",
      "definition": "Sets the default SSL context. It will be returned by subsequent calls to getDefault(). The default context must be immediately usable and not require initialization.",
      "Parameters": "context - the SSLContext",
      "Returns": "none",
      "Throws": "NullPointerException - if context is null, SecurityException - if a security manager exists and its checkPermission method does not allow SSLPermission(\"setDefaultSSLContext\")",
      "Secure_use": "Ensure the context is not null and security permissions are properly set.",
      "Insecure_use": "Passing a null context or insufficient security permissions."
    },
    {
      "Function_name": "getInstance (String protocol)",
      "definition": "Returns a SSLContext object that implements the specified secure socket protocol.",
      "Parameters": "protocol - the name of the protocol",
      "Returns": "A new SSLContext object encapsulating the SSLContextSpi implementation from the first Provider that supports the specified protocol.",
      "Throws": "NoSuchAlgorithmException - if the SSLContext.getInstance() call fails",
      "Secure_use": "Use a valid and supported protocol name.",
      "Insecure_use": "Using an unsupported or invalid protocol name."
    },
    {
      "Function_name": "getInstance (String protocol, String provider)",
      "definition": "Returns a SSLContext object that implements the specified secure socket protocol.",
      "Parameters": "protocol - the standard name of the requested protocol. provider - the name of the provider.",
      "Returns": "the new SSLContext object.",
      "Throws": "NoSuchAlgorithmException - if no Provider supports a SSLContextSpi implementation for the specified protocol. NoSuchProviderException - if the specified provider is not registered in the security provider list.",
      "Secure_use": "Ensure that the specified provider is registered in the security provider list before calling this method.",
      "Insecure_use": "Calling this method with a null protocol or a provider that is not registered could lead to exceptions."
    },
    {
      "Function_name": "getInstance (String protocol, Provider provider)",
      "definition": "Returns a SSLContext object that implements the specified secure socket protocol. A new SSLContext object encapsulating the SSLContextSpi implementation from the specified Provider object is returned.",
      "Parameters": "protocol - the standard name of the requested protocol. See the SSLContext section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard protocol names. provider - the name of the provider.",
      "Returns": "the new SSLContext object.",
      "Throws": "NoSuchAlgorithmException - if a SSLContextSpi implementation for the specified protocol is not available from the specified provider. NoSuchProviderException - if the specified provider is not registered in the security provider list. IllegalArgumentException - if the provider name is null or empty. NullPointerException - if protocol is null.",
      "Secure_use": "none",
      "Insecure_use": "none"
    }
  ]
  },
  {
  "CLASS_name": "ServerSocketFactory",
  "Description": "Instances of this class represent a secure socket protocol implementation which acts as a factory for secure socket factories or SSLEngines. This class is initialized with an optional set of key and trust managers and source of secure random bytes.",
  "API_funtions": [
    {
      "Function_name": "createSSLEngine",
      "definition": "Creates a new SSLEngine using this context.",
      "Parameters": "none",
      "Returns": "SSLEngine",
      "Throws": "none",
      "Secure_use": "none",
      "Insecure_use": "none"
    },
    {
      "Function_name": "createSSLEngine (String peerHost, int peerPort) ",
      "definition": "Creates a new SSLEngine using this context using advisory peer information.",
      "Parameters": "String peerHost, int peerPort",
      "Returns": "SSLEngine",
      "Throws": "none",
      "Secure_use": "none",
      "Insecure_use": "none"
    },
    {
      "Function_name": "getClientSessionContext",
      "definition": "Returns the client session context, which represents the set of SSL sessions available for use during the handshake phase of client-side SSL sockets.",
      "Parameters": "none",
      "Returns": "SSLSessionContext",
      "Throws": "none",
      "Secure_use": "none",
      "Insecure_use": "none"
    },
    {
      "Function_name": "getDefault",
      "definition": "Returns the default SSL context.",
      "Parameters": "none",
      "Returns": "SSLContext",
      "Throws": "none",
      "Secure_use": "none",
      "Insecure_use": "none"
    },
    {
      "Function_name": "getDefaultSSLParameters",
      "definition": "Returns a copy of the SSLParameters indicating the default settings for this SSL context.",
      "Parameters": "none",
      "Returns": "SSLParameters",
      "Throws": "none",
      "Secure_use": "none",
      "Insecure_use": "none"
    },
    {
      "Function_name": "getInstance",
      "definition": "Returns a SSLContext object that implements the specified secure socket protocol.",
      "Parameters": "String protocol",
      "Returns": "SSLContext",
      "Throws": "none",
      "Secure_use": "none",
      "Insecure_use": "none"
    },
    {
      "Function_name": "getInstance (String protocol, String provider)",
      "definition": "Returns a SSLContext object that implements the specified secure socket protocol.",
      "Parameters": "String protocol, String provider",
      "Returns": "SSLContext",
      "Throws": "none",
      "Secure_use": "none",
      "Insecure_use": "none"
    },
    {
      "Function_name": "getServerSessionContext",
      "definition": "Returns the server session context, which represents the set of SSL sessions available for use during the handshake phase of server-side SSL sockets.",
      "Parameters": "none",
      "Returns": "SSLSessionContext",
      "Throws": "none",
      "Secure_use": "none",
      "Insecure_use": "none"
    },
    {
      "Function_name": "getServerSocketFactory",
      "definition": "Returns a ServerSocketFactory object for this context.",
      "Parameters": "none",
      "Returns": "SSLServerSocketFactory",
      "Throws": "none",
      "Secure_use": "none",
      "Insecure_use": "none"
    },
    {
      "Function_name": "getSocketFactory",
      "definition": "Returns a SocketFactory object for this context.",
      "Parameters": "none",
      "Returns": "SSLSocketFactory",
      "Throws": "none",
      "Secure_use": "none",
      "Insecure_use": "none"
    },
    {
      "Function_name": "init (KeyManager[] km, TrustManager[] tm, SecureRandom random)",
      "definition": "Initializes this context.",
      "Parameters": "KeyManager[] km, TrustManager[] tm, SecureRandom random",
      "Returns": "void",
      "Throws": "none",
      "Secure_use": "none",
      "Insecure_use": "none"
    },
    {
      "Function_name": "setDefault (SSLContext context)",
      "definition": "Sets the default SSL context.",
      "Parameters": "SSLContext context",
      "Returns": "void",
      "Throws": "none",
      "Secure_use": "none",
      "Insecure_use": "none"
    },
    {
      "Function_name": "getDefault",
      "definition": "Returns the default SSL context.",
      "Parameters": "none",
      "Returns": "the default SSL context",
      "Throws": "NoSuchAlgorithmException",
      "Secure_use": "The default context is immediately usable and does not require initialization.",
      "Insecure_use": "none"
    },
    {
      "Function_name": "setDefault (SSLContext context)",
      "definition": "Sets the default SSL context. It will be returned by subsequent calls to getDefault(). The default context must be immediately usable and not require initialization.",
      "Parameters": "context - the SSLContext",
      "Returns": "none",
      "Throws": "NullPointerException - if context is null, SecurityException - if a security manager exists and its checkPermission method does not allow SSLPermission(\"setDefaultSSLContext\")",
      "Secure_use": "Ensure the context is not null and security permissions are properly set.",
      "Insecure_use": "Passing a null context or insufficient security permissions."
    },
    {
      "Function_name": "getInstance (String protocol)",
      "definition": "Returns a SSLContext object that implements the specified secure socket protocol.",
      "Parameters": "protocol - the name of the protocol",
      "Returns": "A new SSLContext object encapsulating the SSLContextSpi implementation from the first Provider that supports the specified protocol.",
      "Throws": "NoSuchAlgorithmException - if the SSLContext.getInstance() call fails",
      "Secure_use": "Use a valid and supported protocol name.",
      "Insecure_use": "Using an unsupported or invalid protocol name."
    },
    {
      "Function_name": "getInstance (String protocol, String provider)",
      "definition": "Returns a SSLContext object that implements the specified secure socket protocol.",
      "Parameters": "protocol - the standard name of the requested protocol. provider - the name of the provider.",
      "Returns": "the new SSLContext object.",
      "Throws": "NoSuchAlgorithmException - if no Provider supports a SSLContextSpi implementation for the specified protocol. NoSuchProviderException - if the specified provider is not registered in the security provider list.",
      "Secure_use": "Ensure that the specified provider is registered in the security provider list before calling this method.",
      "Insecure_use": "Calling this method with a null protocol or a provider that is not registered could lead to exceptions."
    },
    {
      "Function_name": "getInstance (String protocol, Provider provider)",
      "definition": "Returns a SSLContext object that implements the specified secure socket protocol. A new SSLContext object encapsulating the SSLContextSpi implementation from the specified Provider object is returned.",
      "Parameters": "protocol - the standard name of the requested protocol. See the SSLContext section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard protocol names. provider - the name of the provider.",
      "Returns": "the new SSLContext object.",
      "Throws": "NoSuchAlgorithmException - if a SSLContextSpi implementation for the specified protocol is not available from the specified provider. NoSuchProviderException - if the specified provider is not registered in the security provider list. IllegalArgumentException - if the provider name is null or empty. NullPointerException - if protocol is null.",
      "Secure_use": "none",
      "Insecure_use": "none"
    }
  ]
  }
]